<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我曾经七次鄙视自己的灵魂 --纪伯伦</title>
      <link href="/2021/03/15/%E6%88%91%E6%9B%BE%E7%BB%8F%E4%B8%83%E6%AC%A1%E9%84%99%E8%A7%86%E8%87%AA%E5%B7%B1%E7%9A%84%E7%81%B5%E9%AD%82/"/>
      <url>/2021/03/15/%E6%88%91%E6%9B%BE%E7%BB%8F%E4%B8%83%E6%AC%A1%E9%84%99%E8%A7%86%E8%87%AA%E5%B7%B1%E7%9A%84%E7%81%B5%E9%AD%82/</url>
      
        <content type="html"><![CDATA[<p>它本可进取，却故作谦卑</p><a id="more"></a><p>它空虚时，用爱欲来填充</p><p>困难和容易之间，它选择容易</p><p>它犯错，却借由别人也会犯错来宽慰自己</p><p>它自由软弱，却把它认为是生命的坚韧</p><p>它鄙夷一张丑恶的嘴脸，却不知那是自己面具中的一副</p><p>它在生活污泥中，虽不甘心，却又畏首畏尾</p>]]></content>
      
      
      <categories>
          
          <category> 诗词文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>星际穿越</title>
      <link href="/2020/09/28/%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A/"/>
      <url>/2020/09/28/%E6%98%9F%E9%99%85%E7%A9%BF%E8%B6%8A/</url>
      
        <content type="html"><![CDATA[<h3 id="简介【网络转载】"><a href="#简介【网络转载】" class="headerlink" title="简介【网络转载】"></a>简介【网络转载】</h3><p>星际穿越里最震撼的场景就是，浩瀚星空下，低沉诵读狄兰·托马斯这首诗，迸发不屈之力。这部电影隐含着主题应该是：临终。</p><p>一个临终的地球；布兰德教授临终的坦白，艾米莉亚临终之路是飞向自己爱人的星球；曼恩不甘死于异星，临终前最后一句话是：人类的未来……<br><a id="more"></a><br>库珀临终刹那回到女儿的小屋，父母要当孩子的幽灵。</p><p>布兰德教授说，我害怕的不是引力，是时间。因为时间会让人走向终结。</p><p>物理学上，能够击败时间的力量只有引力和光。 而光也无法逃离黑洞，恒星在坠入黑洞前会爆发最后的能力，这才是：rage against the dying of the light.</p><p>这首诗是写于1951年，狄兰·托马斯用以鼓励病重的父亲，而他自己三年后死于连续喝了18杯白兰地。</p><p>诺兰赋予了这首诗新的含义，不仅仅是某个人的临终怒吼，还有整个人类、星球的命运，又能隐喻光堙没于黑洞的瞬间。翻译的难度也很大，版本非常多。</p><p>最喜欢高晓松的版本。</p><h3 id="诗作原文"><a href="#诗作原文" class="headerlink" title="诗作原文"></a>诗作原文</h3><p>Do Not Go Gentle Into That Good Night – Dylan Thomas</p><p>Do not go gentle into that good night,</p><p>Old age should burn and rave at the close of day;</p><p>Rage, rage against the dying of the light.</p><p>Though wise men at their end know dark is right,</p><p>Because their words had forked no lightning they</p><p>Do not go gentle into that good night.</p><p>Good men, the last wave by, crying how bright</p><p>Their frail deeds might have danced in a green bay,</p><p>Rage, rage against the dying of the light.</p><p>Wild men who caught and sang the sun in flight,</p><p>And learn, too late, they grieved it on its way,</p><p>Do not go gentle into that good night.</p><p>Grave men, near death, who see with blinding sight</p><p>Blind eyes could blaze like meteors and be gay,</p><p>Rage, rage against the dying of the light.</p><p>And you, my father, there on the sad height,</p><p>Curse, bless, me now with your fierce tears, I pray,</p><p>Do not go gentle into that good night,</p><p>Rage, rage against the dying of the light.</p><h3 id="中文翻译：高晓松版"><a href="#中文翻译：高晓松版" class="headerlink" title="中文翻译：高晓松版"></a>中文翻译：高晓松版</h3><p>绝不向黑夜请安</p><p>老朽请于白日尽头涅槃</p><p>咆哮于光之消散</p><p>先哲虽败于幽暗</p><p>诗歌终不能将苍穹点燃</p><p>绝不向黑夜请安</p><p>贤者舞蹈于碧湾</p><p>为惊涛淹没的善行哭喊</p><p>咆哮于光之消散</p><p>狂者如夸父逐日</p><p>高歌中顿觉迟来的伤感</p><p>绝不向黑夜请安</p><p>逝者于临终迷幻</p><p>盲瞳怒放出流星的灿烂</p><p>咆哮于光之消散</p><p>那么您，我垂垂将死的父亲</p><p>请掬最后一捧热泪降临</p><p>请诅咒，请保佑</p><p>我祈愿，绝不向</p><p>黑夜请安，咆哮</p><p>于光之消散</p>]]></content>
      
      
      <categories>
          
          <category> 诗词文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue+axios处理流文件图片</title>
      <link href="/2019/07/22/vue-axios%E5%A4%84%E7%90%86%E6%B5%81%E6%96%87%E4%BB%B6%E5%9B%BE%E7%89%87/"/>
      <url>/2019/07/22/vue-axios%E5%A4%84%E7%90%86%E6%B5%81%E6%96%87%E4%BB%B6%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>vue axios 后端接口返回一个流文件图片，前端base64解析直接展示<br><a id="more"></a></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">getImg(filePath) &#123;</span><br><span class="line">  this.$http.get(&apos;/img&apos;, &#123;</span><br><span class="line">    responseType: &apos;arraybuffer&apos;</span><br><span class="line">  &#125;).then(response =&gt; &#123;</span><br><span class="line">    return &apos;data:image/png;base64,&apos; + btoa(</span><br><span class="line">      new Uint8Array(response.data)</span><br><span class="line">        .reduce((data, byte) =&gt; data + String.fromCharCode(byte), &apos;&apos;))</span><br><span class="line">  &#125;).then(data =&gt; &#123;</span><br><span class="line">    // console.log(data)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用如下"><a href="#使用如下" class="headerlink" title="使用如下"></a>使用如下</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/streamStream/axiosStream.png" alt title>                </div>                <div class="image-caption"></div>            </figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos安装宝塔及https证书</title>
      <link href="/2019/07/16/centos%E5%AE%89%E8%A3%85%E5%AE%9D%E5%A1%94%E5%8F%8Ahttps%E8%AF%81%E4%B9%A6/"/>
      <url>/2019/07/16/centos%E5%AE%89%E8%A3%85%E5%AE%9D%E5%A1%94%E5%8F%8Ahttps%E8%AF%81%E4%B9%A6/</url>
      
        <content type="html"><![CDATA[<h4 id="注册宝塔账号并安装宝塔"><a href="#注册宝塔账号并安装宝塔" class="headerlink" title="注册宝塔账号并安装宝塔"></a>注册宝塔账号并安装宝塔</h4><ul><li><a href="https://www.bt.cn/register.html" target="_blank" rel="noopener">注册账号地址</a>【后面会用到】</li><li><a href="https://github.com/aaPanel/BaoTa" target="_blank" rel="noopener">github链接</a><a id="more"></a>centos使用如下命令安装：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure><p>安装完成后 保存下方账号：【你的ip地址+默认端口号8888】<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/baota/baota1.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h4 id="登录宝塔面板安装nginx"><a href="#登录宝塔面板安装nginx" class="headerlink" title="登录宝塔面板安装nginx"></a>登录宝塔面板安装nginx</h4><p>这里我们使用安装后得到的账号登录，在面板的软件管理安装我们需要的软件到服务器<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/baota/baota2.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h4 id="首页添加网站"><a href="#首页添加网站" class="headerlink" title="首页添加网站"></a>首页添加网站</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/baota/baota3.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h4 id="申请免费证书【let’s-encrypt】并开启"><a href="#申请免费证书【let’s-encrypt】并开启" class="headerlink" title="申请免费证书【let’s encrypt】并开启"></a>申请免费证书【let’s encrypt】并开启</h4><p>1.申请证书【这里可能需要登录，使用我们前面注册的账号】<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/baota/baota4.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br>2.切换到其他证书保存【实则是保存文件到服务器】<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/baota/baota5.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h4 id="nginx配置文件修改"><a href="#nginx配置文件修改" class="headerlink" title="nginx配置文件修改"></a>nginx配置文件修改</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  xx.xxx.com;</span><br><span class="line">        rewrite ^ https://$http_host$request_uri? permanent;</span><br><span class="line">        &#125;</span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name xx.xxx.com;</span><br><span class="line">   location / &#123;</span><br><span class="line">       proxy_pass http://localhost:3001/;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/baota/baota6.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h4 id="重启nginx【结束】"><a href="#重启nginx【结束】" class="headerlink" title="重启nginx【结束】"></a>重启nginx【结束】</h4><p>回到首页，打开nginx面板，先后点击重载配置和重启<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/baota/baota7.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宝塔 </tag>
            
            <tag> https </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序云开发</title>
      <link href="/2019/04/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91/"/>
      <url>/2019/04/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%BA%91%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><h4 id="起步说明【非小白教程】"><a href="#起步说明【非小白教程】" class="headerlink" title="起步说明【非小白教程】"></a>起步说明【非小白教程】</h4><blockquote><p>适合人群【建议快速看文档，对着写一遍】</p></blockquote><ol><li>看过官方文档，并简单的写过<ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/" target="_blank" rel="noopener">起步教程</a></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html" target="_blank" rel="noopener">云开发文档</a></li></ul></li><li>熟悉vue/es6<a id="more"></a></li></ol><h4 id="小程序注册【微信公众平台】"><a href="#小程序注册【微信公众平台】" class="headerlink" title="小程序注册【微信公众平台】"></a>小程序注册【微信公众平台】</h4><blockquote><p>获取appid【微信公众平台-开发-开发设置】</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mpcloud/mpcloud1.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h4 id="新建小程序云开发项目"><a href="#新建小程序云开发项目" class="headerlink" title="新建小程序云开发项目"></a>新建小程序云开发项目</h4><ol><li>新建项目选择一个空目录，填入 AppID（使用云开发能力必须填写 AppID）</li><li>勾选创建 “小程序云开发 ”</li><li>点击新建即可得到一个展示云开发基础能力的示例小程序。</li><li>该小程序与普通 QuickStart 小程序有以下不同需注意：<ul><li>无游客模式、也不可以使用测试号</li><li>project.config.json【工具配置】 中增加了字段 cloudfunctionRoot 用于指定存放云函数的目录</li><li>cloudfunctionRoot 指定的目录有特殊的图标</li><li>云开发能力从基础库 2.2.3 开始支持<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mpcloud/mpcloud2.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul></li></ol><h4 id="未指定环境【第一次使用云开发】"><a href="#未指定环境【第一次使用云开发】" class="headerlink" title="未指定环境【第一次使用云开发】"></a>未指定环境【第一次使用云开发】</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mpcloud/mpcloud3.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h4 id="在使用云开发能力之前需要先开通云开发"><a href="#在使用云开发能力之前需要先开通云开发" class="headerlink" title="在使用云开发能力之前需要先开通云开发"></a>在使用云开发能力之前需要先开通云开发</h4><blockquote><p>点击云开发按钮，继续点击开通，继续同意条款</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mpcloud/mpcloud4.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h4 id="新建环境"><a href="#新建环境" class="headerlink" title="新建环境"></a>新建环境</h4><p><strong>注意事项</strong>：指定环境名称，且后面 <strong>不可更改</strong>，只能建2个【环境ID是根据环境名称自动生成的】<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mpcloud/mpcloud5.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h4 id="修改app-js-初始化【数据库环境ID】"><a href="#修改app-js-初始化【数据库环境ID】" class="headerlink" title="修改app.js 初始化【数据库环境ID】"></a>修改app.js 初始化【数据库环境ID】</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mpcloud/mpcloud6.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p><strong>环境ID如下：</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mpcloud/mpcloud7.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h3 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h3><h4 id="初始化后的目录"><a href="#初始化后的目录" class="headerlink" title="初始化后的目录"></a>初始化后的目录</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mpcloud/mpcloud8.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p><strong>新建页面示例</strong></p><ul><li>js【页面逻辑】</li><li>json【页面配置】</li><li>wxml【页面结构】</li><li>wxss【页面样式表】<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mpcloud/mpcloud9.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul><h4 id="app-json【ctrl-s保存】"><a href="#app-json【ctrl-s保存】" class="headerlink" title="app.json【ctrl+s保存】"></a>app.json【ctrl+s保存】</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mpcloud/mpcloud10.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h4 id="新建util文件夹"><a href="#新建util文件夹" class="headerlink" title="新建util文件夹"></a>新建util文件夹</h4><p><a href="https://github.com/xushankun/yhtd-mp/tree/master/miniprogram/utils" target="_blank" rel="noopener">utils文件代码地址</a><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mpcloud/mpcloud11.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h4 id="入口文件app-js"><a href="#入口文件app-js" class="headerlink" title="入口文件app.js"></a>入口文件app.js</h4><p>公共js全局引入，也可以在各个页面单独引用<br><a href="https://github.com/xushankun/yhtd-mp/blob/master/miniprogram/app.js" target="_blank" rel="noopener">app.js代码代码地址</a><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mpcloud/mpcloud12.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><h4 id="全局配置【指的就是app-json】"><a href="#全局配置【指的就是app-json】" class="headerlink" title="全局配置【指的就是app.json】"></a>全局配置【指的就是app.json】</h4><blockquote><p>这里只写了一些项目用到的，其它配置参照官方文档</p></blockquote><p><img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mpcloud/mpcloud13.png" alt></p><h4 id="页面配置【页面文件json格式结尾的】【约定大于配置】"><a href="#页面配置【页面文件json格式结尾的】【约定大于配置】" class="headerlink" title="页面配置【页面文件json格式结尾的】【约定大于配置】"></a>页面配置【页面文件json格式结尾的】【约定大于配置】</h4><blockquote><p>页面配置只能设置app.json中部分 window 配置项的内容，页面中配置项会覆盖 app.json 的 window 中相同的配置项。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mpcloud/mpcloud14.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p></blockquote><h3 id="云开发【包括云函数】"><a href="#云开发【包括云函数】" class="headerlink" title="云开发【包括云函数】"></a>云开发【包括云函数】</h3><p>前面已经介绍了小程序端的一些基本配置及文件的介绍；<br>这篇来讲一下云开发，在初始化项目时已经开通了云开发功能。</p><h4 id="云开发介绍"><a href="#云开发介绍" class="headerlink" title="云开发介绍"></a>云开发介绍</h4><ol><li>三大基础能力支持：<ul><li>云函数：在云端运行的代码，微信私有协议天然鉴权，开发者只需编写自身业务逻辑代码</li><li>数据库：一个既<strong>可在小程序前端操作</strong>，也能在<strong>云函数中读写</strong>的 JSON 数据库</li><li>存储：在小程序前端直接上传/下载云端文件，在云开发控制台可视化管理【<strong>类似七牛的对象存储</strong>】</li></ul></li><li><a href="https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/getting-started.html#%E4%BA%91%E5%BC%80%E5%8F%91%E6%8E%A7%E5%88%B6%E5%8F%B0" target="_blank" rel="noopener">云开发控制台</a></li></ol><h4 id="数据库周边"><a href="#数据库周边" class="headerlink" title="数据库周边"></a>数据库周边</h4><ul><li>每条记录都有一个_id字段用以唯一标志一条记录</li><li>一个_openid字段用以标志记录的创建者，即小程序的用户【仅在小程序端创建才会生成此字段】</li><li>开发者可以自定义 _id，但不可自定义和修改 _openid</li><li>数据库 API 分为小程序端和服务端两部分，服务端相对小程序端操作，服务端权限大且更安全</li></ul><h4 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h4><blockquote><p>数据库的权限分为小程序端和管理端，管理端包括云函数端和控制台。</p></blockquote><ul><li>小程序端运行在小程序中，读写数据库受权限控制限制，</li><li>管理端运行在云函数上，拥有所有读写数据库的权限。云控制台的权限同管理端，拥有所有权限。</li></ul><p><strong>具体权限见云开发文档</strong></p><h4 id="开发示例"><a href="#开发示例" class="headerlink" title="开发示例"></a>开发示例</h4><p><strong>注意事项</strong>：使用<strong>集合必须是已存在的</strong>，所以得<strong>提前添加</strong></p><ol><li><p>创建第一个集合</p><ul><li>打开控制台，选择 “数据库” 标签页，通过 “添加集合” 入口创建一个集合。</li><li>界面中我们可以添加记录、查找记录、管理索引和管理权限。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mpcloud/mpcloud15.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul></li><li><p>小程序端操作数据</p><ul><li>以下第一条红框代码：调用获取默认环境的数据库的引用【<strong>用node写过接口的同学可能一下就看明白了</strong>】<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mpcloud/mpcloud16.png" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mpcloud/mpcloud17.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul></li><li><p>服务端操作数据【云开发】</p><ul><li>新建云函数<ul><li>右键云函数根目录文件夹： 新建Node.js云函数，初始化如下<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mpcloud/mpcloud18.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul></li></ul><ul><li>云函数同步<ul><li>右键云函数文件夹：上传并部署：云端安装所有依赖</li></ul></li><li>云函数使用<ul><li>云函数可相互间调用</li><li>云函数可小程序端使用，小程序端使用如下：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mpcloud/mpcloud19.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul></li></ul></li></ol><h3 id="其它问题汇总"><a href="#其它问题汇总" class="headerlink" title="其它问题汇总"></a>其它问题汇总</h3><h4 id="小程序端"><a href="#小程序端" class="headerlink" title="小程序端"></a>小程序端</h4><blockquote><p>自定义组件以及第三方组件的使用【见项目pages/index代码】<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mpcloud/mpcloud20.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p></blockquote><h4 id="云开发"><a href="#云开发" class="headerlink" title="云开发"></a>云开发</h4><ol><li>多个云函数环境切换繁琐，不能统一配置【感觉后面官方会退出更合适的方法】<ul><li>解决办法：tcb-router</li><li>思路：建立一个云函数，通过不同的url寻找方法</li><li><a href="https://developers.weixin.qq.com/community/develop/doc/00020a4bc90470749e971173951804" target="_blank" rel="noopener">相关链接</a></li></ul></li><li>本地调试繁琐<pre><code>没有尝试--!</code></pre></li></ol><h3 id="入门项目【硬核天地】"><a href="#入门项目【硬核天地】" class="headerlink" title="入门项目【硬核天地】"></a>入门项目【硬核天地】</h3><ul><li><a href="https://github.com/xushankun/yhtd-mp" target="_blank" rel="noopener">git源码</a></li><li>扫码体验：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mpcloud/yhtd-vcode.jpg" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ul><h4 id="安装使用"><a href="#安装使用" class="headerlink" title="安装使用"></a>安装使用</h4><ol><li><p>克隆代码到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/xushankun/yhtd-mp.git</span><br></pre></td></tr></table></figure></li><li><p>打开“微信开发者工具”，导入项目</p></li><li><p>导入时填写自己的<strong>appid</strong> 或者导入后<strong>project.config.json</strong> 里更改<strong>appid</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mpcloud/mpcloud21.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li><p><strong>环境ID</strong>改为自己的【包括每个云函数index.js里的<strong>环境ID</strong>】</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mpcloud/mpcloud22.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li><p>数据库<strong>添加集合</strong>如下：</p><ul><li>defriend【黑名单列表】</li><li>kklist【帖子列表】</li><li>services【功能控制开关】   字段：”isRelease”:true</li><li>users【用户列表】</li></ul></li></ol><p>isRelease发布状态时改为false【<strong>规避微信审核</strong>，因为个人开发者禁止用户发布信息】<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mpcloud/mpcloud23.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins搭建部署node项目</title>
      <link href="/2019/03/26/jenkins%E9%83%A8%E7%BD%B2node%E9%A1%B9%E7%9B%AE/"/>
      <url>/2019/03/26/jenkins%E9%83%A8%E7%BD%B2node%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><ul><li>centos搭建jenkins</li><li>实现github提交代码后自动部署项目<a id="more"></a><h3 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h3></li></ul><ol><li>下载git命令:wget <a href="https://www.kernel.org/pub/software/scm/git/git-2.8.3.tar.gz" target="_blank" rel="noopener">https://www.kernel.org/pub/software/scm/git/git-2.8.3.tar.gz</a>          //选择一个目录后执行，我的是/usr/local/git</li><li>解压git的tar包命令: tar -xzvf git-2.8.3.tar.gz  ，进入解压后的文件夹:cd git-2.8.3</li><li>安装git安装编译所需要的依赖命令:yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker</li><li>安装编译源码所需依赖的时候，yum自动帮你安装了git，这时候你需要先卸载这个旧版的git，命令：yum remove git</li><li>编译git源码命令:make prefix=/usr/local/git all</li><li>安装git至/usr/local/git路径命令：make prefix=/usr/local/git install</li><li>配置git环境变量:vim /etc/profile  #编辑profile文件—-&gt;最下边添加git的路径即可：export PATH=$PATH:/usr/local/git/bin</li><li>让profile文件修改生效命令:source /etc/profile</li><li>检验git是否安装成功命令:git –version 安装成功图如下:<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/jenkins/jenkins1.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ol><h3 id="tomcat安装"><a href="#tomcat安装" class="headerlink" title="tomcat安装"></a>tomcat安装</h3><ol><li><a href="http://tomcat.apache.org/" target="_blank" rel="noopener">官网</a><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/jenkins/jenkins2.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li>上传服务器<ul><li>使用FTPCute、WinSCP等工具，可以把安装包上传到服务器</li><li>路径是/opt。</li></ul></li><li><p>安装tomcat<br>用Xshell等Linux远程连接工具访问服务器【这里更推荐使用MobaXtrem，拖拽式上传文件】。<br>进入/opt目录，指令是cd /opt。<br>解压安装包，指令是tar -xzvf apache-tomcat-7.0.67.tar.gz。<br>重命名解压后的文件夹，指令是mv apache-tomcat-7.0.67 tomcat。<br>进入内部文件夹，指令是cd /opt/tomcat/bin。<br>尝试启动tomcat，【启动命令】sh startup.sh，如果报错Cannot find ./catalina.sh.The file is absent or does not have execute permission.This file is needed to run this program，则表示权限不足。<br>开启权限，指令是chmod 777 *.sh，然后再次启动tomcat，如果这时候没有报错，那就表示正在启动了。<br>输入tailf /opt/tomcat/logs/catalina.out，可以查看到tomcat的运行信息，如果看到INFO: Server startup in 1925 ms，则表示tomcat已经启动成功了，按ctrl+c退出该日志。<br>【停止命令】sh shutdown.sh 停止tomcat的运行，继续进行后续操作。</p></li><li><p>修改tomcat默认端口【亦可不修改】<br>tomcat默认的端口是8080，也就是说我们在浏览器访问的时候，需要在域名或IP后面加上:8080，              这样不太方便，但是这个可以修改。<br>打开tomcat配置文件，指令是vi /opt/tomcat/conf/server.xml。<br>打开之后按i或者a进入编辑模式。<br>找到8080，改为80。<br>然后按Esc键，然后按:wq，保存并退出（那个:是需要同时按着shift键才能出来的）。<br>启动tomcat【进入bin目录  sh startup.sh】。<br>开放防火墙80端口。<br>开放：firewall-cmd –zone=public –add-port=80/tcp –permanent<br>重载：firewall-cmd –reload</p></li></ol><ol start="5"><li>tomcat配置<br>编码有问题，在Tomcat–&gt;conf–&gt;server.xml文件中修改即可：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/jenkins/jenkins3.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li>访问<br>在浏览器输入该服务器的域名或者IP，可以看到默认页面。【我这里是使用的默认端口8080】<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/jenkins/jenkins4.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li></ol><h3 id="jenkins部署"><a href="#jenkins部署" class="headerlink" title="jenkins部署"></a>jenkins部署</h3><p>jenkins的war包下载地址：<a href="https://jenkins.io/doc/book/installing/" target="_blank" rel="noopener">https://jenkins.io/doc/book/installing/</a>    找到WAR file</p><h4 id="解压安装"><a href="#解压安装" class="headerlink" title="解压安装"></a>解压安装</h4><p>将jenkins.war包放到Tomcat中webapps并解压，启动Tomcat，成功启动之后访问ip和端口和jenkins如下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/jenkins/jenkins5.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br>查看密码命令:vim +图片上显示的红色地址，进入下一个界面让我们安装插件，可以选择左边的，是推荐插件，右边是自己选择(这个没什么必要)安装过程有点慢，只需要等待即可。安装完后自己看提示输入管理员信息。重启tomcat，在网页上输入jenkins地址，登录后的界面如下:<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/jenkins/jenkins6.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><ul><li>插件安装【工作台-系统管理-插件管理】<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/jenkins/jenkins7.png" alt title>                </div>                <div class="image-caption"></div>            </figure>在可选插件中安装Deploy to container Plugin(这个是支持将代码部署到tomcat容器的)，选择后直接安装就可以，在安装界面下方勾选安装后重启，如下图：<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/jenkins/jenkins8.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li>同样的方式安装：GitHub plugin   和   NodeJS Plugin</li></ul><h4 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h4><ul><li>全局工具配置【工作台-系统管理-全局工具配置】</li><li>git配置<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/jenkins/jenkins9.png" alt title>                </div>                <div class="image-caption"></div>            </figure>这里注意下git位置，这是可执行文件的地址，不是我们前面安装git的地址，是git/bin下的可执行文件 git的目录，如果不知道可以执行命令:#whereis git,找到路径带bin的git地址就是上面要填的。</li><li><p>node配置<br> <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/jenkins/jenkins10.png" alt></p></li><li><p>系统设置【工作台-系统管理-系统设置】</p><p>在系统管理里面的系统设置中新增一个环境变量，防止新建任务中的git地址填写报208或108错误，【键：GIT_SSL_NO_VERIFY】如下图:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/jenkins/jenkins11.png" alt title>                </div>                <div class="image-caption"></div>            </figure></li><li><p>添加凭据【工作台-凭据】 ，即全局git  key的配置</p></li></ul><p>第一步：服务器cmd    ssh -keygen  生成公钥与私钥<br>点击  工作台-凭据-系统-全局凭据【私钥添加】<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/jenkins/jenkins12.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br>github公钥添加【github-setting里添加，怎么添加去百度吧，一大堆】</p><h4 id="新建任务"><a href="#新建任务" class="headerlink" title="新建任务"></a>新建任务</h4><p>【任务配置】选择一个自由放个的软件项目-确定<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/jenkins/jenkins13.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h4 id="源码管理"><a href="#源码管理" class="headerlink" title="源码管理"></a>源码管理</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/jenkins/jenkins14.png" alt title>                </div>                <div class="image-caption"></div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/jenkins/jenkins15.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h4 id="立即构建"><a href="#立即构建" class="headerlink" title="立即构建"></a>立即构建</h4><p>【进入项目xxx】可以通过控制台查看构建日志<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/jenkins/jenkins16.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h4 id="自动构建"><a href="#自动构建" class="headerlink" title="自动构建"></a>自动构建</h4><p>jenkins 配置github 实现提交代码自动触发jenkins job【webhook触发】</p><ol><li><a href="https://blog.csdn.net/DevOps008/article/details/81773736" target="_blank" rel="noopener">方法</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> 部署 </tag>
            
            <tag> 运维 </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终端神器Mobaxterm【拖拽式上传】</title>
      <link href="/2019/03/07/%E7%BB%88%E7%AB%AF%E7%A5%9E%E5%99%A8Mobaxterm%E3%80%90%E6%8B%96%E6%8B%BD%E5%BC%8F%E4%B8%8A%E4%BC%A0%E3%80%91/"/>
      <url>/2019/03/07/%E7%BB%88%E7%AB%AF%E7%A5%9E%E5%99%A8Mobaxterm%E3%80%90%E6%8B%96%E6%8B%BD%E5%BC%8F%E4%B8%8A%E4%BC%A0%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h3 id="给大佬递上链接"><a href="#给大佬递上链接" class="headerlink" title="给大佬递上链接"></a>给大佬递上链接</h3><p>┏ (゜ω゜)=☞：<a href="https://pan.baidu.com/s/1CBzMMWiDZvwL8Lg4Q8RbRw" target="_blank" rel="noopener">百度云</a>，提取码：ans9<br><a id="more"></a></p><h3 id="准备连接步骤【看图说话】"><a href="#准备连接步骤【看图说话】" class="headerlink" title="准备连接步骤【看图说话】"></a>准备连接步骤【看图说话】</h3><p>1.点击session<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mobaxterm/mobaxterm1.png" alt title>                </div>                <div class="image-caption"></div>            </figure><br>2.选择SSH，点击OK</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mobaxterm/mobaxterm2.png" alt title>                </div>                <div class="image-caption"></div>            </figure><p>3.输入密码<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mobaxterm/mobaxterm3.png" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h3 id="【同样的方法添加一下sftp】连接成功以后"><a href="#【同样的方法添加一下sftp】连接成功以后" class="headerlink" title="【同样的方法添加一下sftp】连接成功以后"></a>【同样的方法添加一下sftp】连接成功以后</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/mobaxterm/mobaxterm4.png" alt title>                </div>                <div class="image-caption"></div>            </figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>左侧目录为服务器根目录<br>可拖拽式上传文件，右侧可命令行输入操作</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> ftp </tag>
            
            <tag> sftp </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分支管理</title>
      <link href="/2019/02/26/%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/"/>
      <url>/2019/02/26/%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="何为分支【差不多原理】"><a href="#何为分支【差不多原理】" class="headerlink" title="何为分支【差不多原理】"></a>何为分支【差不多原理】</h3><p>从当前<code>主分支</code>【比如master】复制一个版本【比如dev】进行修改或新开发，并且不会影响主分支的版本，主分支可继续向前迭代，新分支也可以继续进行分支，并且所有版本可以相互<code>合并</code>【merge】<br><a id="more"></a></p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p>创建<code>dev</code>分支，然后切换到<code>dev</code>分支：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev</span><br><span class="line">Switched to a new branch &apos;dev&apos;</span><br></pre></td></tr></table></figure></p><p><code>git checkout</code>命令加上-b参数表示创建并切换，相当于以下两条命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch dev</span><br><span class="line">$ git checkout dev</span><br><span class="line">Switched to branch &apos;dev&apos;</span><br></pre></td></tr></table></figure></p><p>查看分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git branch// 查看本地分支</span><br><span class="line">* dev// 当前分支前面会标一个*号。</span><br><span class="line">  master</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git branch -a// 查看本地及远程分支</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>查看分支：<code>git branch</code></p><p>创建分支：<code>git branch &lt;name&gt;</code></p><p>切换分支：<code>git checkout &lt;name&gt;</code></p><p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></p><p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p><p>删除分支：<code>git branch -d &lt;name&gt;</code></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git配置多账号登录不同项目</title>
      <link href="/2019/02/12/git%E9%85%8D%E7%BD%AE%E5%A4%9A%E8%B4%A6%E5%8F%B7%E7%99%BB%E5%BD%95%E4%B8%8D%E5%90%8C%E9%A1%B9%E7%9B%AE/"/>
      <url>/2019/02/12/git%E9%85%8D%E7%BD%AE%E5%A4%9A%E8%B4%A6%E5%8F%B7%E7%99%BB%E5%BD%95%E4%B8%8D%E5%90%8C%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>我们做项目时会有自己的github账号，和公司的git账号。<br><a id="more"></a><br>本文以配置github.com账号、码云账号以及公司git账号，即在Windows环境下配置Git多账号的使用</p><h3 id="生成github-com对应的私钥公钥"><a href="#生成github-com对应的私钥公钥" class="headerlink" title="生成github.com对应的私钥公钥"></a>生成github.com对应的私钥公钥</h3><p>1.首先进入.ssh文件夹:右键Git Bash Here</p><p>2.执行命令 ssh-keygen -t rsa -C email 创建github对应的sshkey，命名为id_rsa_github，密码可以为空，一路回车【如下图】<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/tool/git-account/git-account1.png" alt="私钥公钥" title>                </div>                <div class="image-caption">私钥公钥</div>            </figure></p><p>PS：同样的方式配置码云以及公司git的私钥公钥</p><h3 id="把github、码云和公司的git对应的公钥上传到服务器"><a href="#把github、码云和公司的git对应的公钥上传到服务器" class="headerlink" title="把github、码云和公司的git对应的公钥上传到服务器"></a>把github、码云和公司的git对应的公钥上传到服务器</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/tool/git-account/git-account2.png" alt="上传公钥" title>                </div>                <div class="image-caption">上传公钥</div>            </figure><h3 id="SSH配置"><a href="#SSH配置" class="headerlink" title="SSH配置"></a>SSH配置</h3><p>邮箱不同也会对应不同的SSH key，所以要针对不同的项目使用不同的key。<br>所以打开git全局配置文件。一般在用户目录下的.ssh文件夹中。比如windows用户就是：C:\Users\用户名.ssh<br>Linux就是～/.ssh<br>找到config文件。没有就新建一个config.txt【保存时去掉.txt,即改为config】，用文本编辑器打开，添加如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 配置github.com</span><br><span class="line">Host github.com                 </span><br><span class="line">    HostName github.com</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    User xushankun</span><br><span class="line"></span><br><span class="line"># 配置git.xxx.com</span><br><span class="line">Host git.xxx.com</span><br><span class="line">    HostName git.xxx.com</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    User xxxusername</span><br><span class="line"></span><br><span class="line"># 配置gitee.com</span><br><span class="line">Host gitee.com</span><br><span class="line">    HostName gitee.com</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_gitee</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    User xusk</span><br></pre></td></tr></table></figure></p><ul><li><code>HostName</code> 是真实的域名地址</li><li><code>IdentityFile</code> 是id_rsa的地址</li><li><code>PreferredAuthentications</code> 配置登录时用什么权限认证–可设为publickey,passwordpublickey,keyboard-interactive等</li><li><code>User</code> 配置使用用户名</li></ul><h3 id="配置完以后"><a href="#配置完以后" class="headerlink" title="配置完以后"></a>配置完以后</h3><p>ssh文件夹<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/tool/git-account/git-account.png" alt="ssh文件夹" title>                </div>                <div class="image-caption">ssh文件夹</div>            </figure></p><h3 id="测试是否成功"><a href="#测试是否成功" class="headerlink" title="测试是否成功"></a>测试是否成功</h3><p>测试成功如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lovex@DESKTOP-CCCU4BL MINGW64 ~/Desktop</span><br><span class="line">$ ssh -T git@github.com</span><br><span class="line">Enter passphrase for key &apos;/c/Users/lovex/.ssh/id_rsa_github&apos;:</span><br><span class="line">Hi xushankun! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"></span><br><span class="line">lovex@DESKTOP-CCCU4BL MINGW64 ~/Desktop</span><br><span class="line">$ ssh -T git@gitee.com</span><br><span class="line">Hi xusk! You&apos;ve successfully authenticated, but GITEE.COM does not provide shell access.</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于@touchmove.prevent</title>
      <link href="/2019/01/25/%E5%85%B3%E4%BA%8E-touchmove-prevent/"/>
      <url>/2019/01/25/%E5%85%B3%E4%BA%8E-touchmove-prevent/</url>
      
        <content type="html"><![CDATA[<h3 id="1-需求"><a href="#1-需求" class="headerlink" title="1.需求"></a>1.需求</h3><p>在出现弹窗时，禁止滑动弹窗后面的主体页面<br><a id="more"></a></p><h3 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h3><p>移动端的屏幕滑动，实际上就是touchmove事件的默认行为<br>在冒泡过程中任何一层阻止这个默认行为，都可以阻止屏幕滑动</p><h3 id="3-带来新的问题"><a href="#3-带来新的问题" class="headerlink" title="3.带来新的问题"></a>3.带来新的问题</h3><p><strong>导致问题</strong>：如果在点击屏幕的时候手指滑动的话，是不会触发click事件的。或者被点击的元素是移动状态，则概率性出发click 事件。  </p><p><strong>分析原因</strong>：在移动端上点击屏幕时，会依次触发touchstart,touchmove,touchend,click事件。  </p><p><strong>触发过程</strong>：touchstart→touchmove→touchend或者touchstart→touchend→click。</p><h3 id="4-解决办法"><a href="#4-解决办法" class="headerlink" title="4.解决办法"></a>4.解决办法</h3><p>touchend 替代 click【暂时未找到更好的办法】</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/touchmove.prevent/clipboard.png" alt="avatar" title>                </div>                <div class="image-caption">avatar</div>            </figure>]]></content>
      
      
      <categories>
          
          <category> H5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> touch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github中fork的使用</title>
      <link href="/2018/12/13/github%E4%B8%ADfork%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/12/13/github%E4%B8%ADfork%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>在Github上如果看到有很不错的项目和作品，一般我们可以进行三种操作：那就是<strong>watch</strong>，<strong>star</strong>和<strong>fork</strong><br><a id="more"></a></p><ul><li>watch就是关注repo的动态</li><li>star则类似社交网站的点赞，收藏，like等</li><li>fork就是讲别人的项目拷贝一份给自己，new一个新的分支（Branch）出来，你push的改进和补充则又由原作者选择是否接受。【更改别人项目的bug 或者 优化别人的项目的常用操作】</li></ul><p>如下图所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/github-fork/github-fork1.png" alt="github-fork1" title>                </div>                <div class="image-caption">github-fork1</div>            </figure><h3 id="第一步：fork后-直接是以下界面【github的操作】"><a href="#第一步：fork后-直接是以下界面【github的操作】" class="headerlink" title="第一步：fork后 直接是以下界面【github的操作】"></a>第一步：fork后 直接是以下界面【github的操作】</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/github-fork/github-fork2.png" alt="github-fork2" title>                </div>                <div class="image-caption">github-fork2</div>            </figure><h3 id="第二步：直接-clone-代码到本地进行修改并提交【git操作】"><a href="#第二步：直接-clone-代码到本地进行修改并提交【git操作】" class="headerlink" title="第二步：直接 clone 代码到本地进行修改并提交【git操作】"></a>第二步：直接 clone 代码到本地进行修改并提交【git操作】</h3><p>这里正常修改代码提交【就不多废话了】详见：    <strong><a href="https://shankun.top/git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4.html">git基本使用命令</a></strong></p><h3 id="第三步：pull-request"><a href="#第三步：pull-request" class="headerlink" title="第三步：pull request"></a>第三步：pull request</h3><h4 id="New-pull-request"><a href="#New-pull-request" class="headerlink" title="New pull request"></a>New pull request</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/github-fork/github-fork3.png" alt="github-fork3" title>                </div>                <div class="image-caption">github-fork3</div>            </figure><h4 id="点击Create-pull-request-【新建关于提交代码的-issues-进行讨论】"><a href="#点击Create-pull-request-【新建关于提交代码的-issues-进行讨论】" class="headerlink" title="点击Create pull request   【新建关于提交代码的  issues 进行讨论】"></a>点击Create pull request   【新建关于提交代码的  issues 进行讨论】</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/github-fork/github-fork4.png" alt="github-fork4" title>                </div>                <div class="image-caption">github-fork4</div>            </figure><h4 id="添加描述并确认创建"><a href="#添加描述并确认创建" class="headerlink" title="添加描述并确认创建"></a>添加描述并确认创建</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/github-fork/github-fork5.png" alt="github-fork5" title>                </div>                <div class="image-caption">github-fork5</div>            </figure><h3 id="第四步：结果等待确认是否通过"><a href="#第四步：结果等待确认是否通过" class="headerlink" title="第四步：结果等待确认是否通过"></a>第四步：结果等待确认是否通过</h3><p>如果出现merge pull request按钮，表示可以和上游仓库同步。之后点下方的merge pull request进行合并，并确认。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/github-fork/github-fork6.png" alt="github-fork6" title>                </div>                <div class="image-caption">github-fork6</div>            </figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/github-fork/github-fork7.png" alt="github-fork7" title>                </div>                <div class="image-caption">github-fork7</div>            </figure><h3 id="删除自己的一个-repository【仓库】"><a href="#删除自己的一个-repository【仓库】" class="headerlink" title="删除自己的一个 repository【仓库】"></a>删除自己的一个 repository【仓库】</h3><p>这里包含自己建的仓库与fork【复制别人的项目到自己】的仓库</p><h4 id="找到项目settings选项"><a href="#找到项目settings选项" class="headerlink" title="找到项目settings选项"></a>找到项目settings选项</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/github-fork/github-fork8.png" alt="github-fork8" title>                </div>                <div class="image-caption">github-fork8</div>            </figure><h4 id="右下角-delete-this-repository"><a href="#右下角-delete-this-repository" class="headerlink" title="右下角  delete this repository"></a>右下角  delete this repository</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/github-fork/github-fork9.png" alt="github-fork9" title>                </div>                <div class="image-caption">github-fork9</div>            </figure><h4 id="输入仓库名称，点击同意"><a href="#输入仓库名称，点击同意" class="headerlink" title="输入仓库名称，点击同意"></a>输入仓库名称，点击同意</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/github-fork/github-fork10.png" alt="github-fork10" title>                </div>                <div class="image-caption">github-fork10</div>            </figure><h4 id="输入github密码-进行最后确认删除"><a href="#输入github密码-进行最后确认删除" class="headerlink" title="输入github密码  进行最后确认删除"></a>输入github密码  进行最后确认删除</h4>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序组件【文本部分和全部显示】</title>
      <link href="/2018/11/06/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BB%84%E4%BB%B6%E3%80%90%E6%96%87%E6%9C%AC%E9%83%A8%E5%88%86%E5%92%8C%E5%85%A8%E9%83%A8%E6%98%BE%E7%A4%BA%E3%80%91/"/>
      <url>/2018/11/06/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BB%84%E4%BB%B6%E3%80%90%E6%96%87%E6%9C%AC%E9%83%A8%E5%88%86%E5%92%8C%E5%85%A8%E9%83%A8%E6%98%BE%E7%A4%BA%E3%80%91/</url>
      
        <content type="html"><![CDATA[<p><strong>文本部分和全部显示</strong>     代码：<a href="https://github.com/xushankun/displayPartText" target="_blank" rel="noopener">displayPartText</a><br><a id="more"></a></p><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>1.文本很多时【收起来，保留指定3行】</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/displayPartText/partText1.png" alt="partText1" title>                </div>                <div class="image-caption">partText1</div>            </figure><p>2.展开后【变为收起来的按钮】<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/displayPartText/partText2.png" alt="partText2" title>                </div>                <div class="image-caption">partText2</div>            </figure></p><p>3.又或者我们还有这样的情况，当文字小于等于3行的时候【不显示按钮】<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/displayPartText/partText3.png" alt="partText3" title>                </div>                <div class="image-caption">partText3</div>            </figure></p><h4 id="组件属性"><a href="#组件属性" class="headerlink" title="组件属性"></a>组件属性</h4><ol><li>textLineHeight【文本行高：number类型默认值52，单位rpx】</li><li>lineNumber【显示行数：number类型默认值2,】</li><li>showBtnText【显示按钮文本，string类型默认值‘更多内容’】</li><li>hideBtnText【隐藏按钮文本，string类型默认值‘收起来’】</li><li>btnShowPosition【按钮显示位置，string类型默认值‘bottom’，可选值rightBottom显示为右下角显示如下图】<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/displayPartText/partText4.png" alt="partText4" title>                </div>                <div class="image-caption">partText4</div>            </figure></li></ol><h4 id="组件方法"><a href="#组件方法" class="headerlink" title="组件方法"></a>组件方法</h4><p>actionHandle隐藏显示时的回调</p><p>返回值为true时是show的回调，false时是hide的回调</p><h4 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h4><p>第一步index.json里引用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"usingComponents"</span>: &#123;</span><br><span class="line">    <span class="string">"displayPartText"</span>: <span class="string">"../components/display-part-text/display-part-text"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第二步index.html<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;displayPartText lineNumber=<span class="string">"3"</span> textLineHeight=<span class="string">"52"</span> bind:actionHandle=<span class="string">"actionHandle"</span>&gt;雨静悄悄地下着，只有一点细细的淅沥沥的声音。桔红色的房屋，像披着鲜艳的袈裟的老僧，垂头合目，受着雨底洗礼。那潮湿的红砖，发出有刺激性的猪血的颜色和墙下绿油油的桂叶成为强烈的对照。灰色的癞蛤蟆，在湿烂发霉的泥地里跳跃着；在秋雨的沉闷的网底，只有它是唯一的充满愉快的生气的东西。它背上灰黄斑驳的花纹，跟沉闷的天空遥遥相应，造成和谐的色调。它噗通噗通地跳着，从草窠里，跳到泥里，溅出深绿的水花。&lt;<span class="regexp">/displayPartText&gt;</span></span><br></pre></td></tr></table></figure></p><p>第三步index.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">actionHandle(e)&#123;</span><br><span class="line">   <span class="keyword">if</span> (e.detail)&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'show'</span>)<span class="comment">// 显示回调</span></span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">'hide'</span>)<span class="comment">// 收起回调</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx 反向代理--解决前端跨域问题</title>
      <link href="/2018/10/18/nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-%E8%A7%A3%E5%86%B3%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
      <url>/2018/10/18/nginx-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86-%E8%A7%A3%E5%86%B3%E5%89%8D%E7%AB%AF%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><p>浏览器同源策略造成的，所有支持javascript的浏览器都支持这个策略，【这里不多说了】</p><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>Nginx (engine x) 是一个高性能的HTTP和反向代理服务【百度百科】</p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>当我们调试前端页面的时候，浏览器报出跨域【即接口与本地服务器不在同一个域内】<br><a id="more"></a></p><h3 id="解决步骤"><a href="#解决步骤" class="headerlink" title="解决步骤"></a>解决步骤</h3><h4 id="一、下载nginx包，官网"><a href="#一、下载nginx包，官网" class="headerlink" title="一、下载nginx包，官网"></a>一、下载nginx包，<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">官网</a></h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/nginx/nginx1.png" alt="release-npm-1" title>                </div>                <div class="image-caption">release-npm-1</div>            </figure><h4 id="二、解压到任意文件夹并打开配置文件"><a href="#二、解压到任意文件夹并打开配置文件" class="headerlink" title="二、解压到任意文件夹并打开配置文件"></a>二、解压到任意文件夹并打开配置文件</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/nginx/nginx2.png" alt="release-npm-1" title>                </div>                <div class="image-caption">release-npm-1</div>            </figure><h4 id="三、编辑配置文件"><a href="#三、编辑配置文件" class="headerlink" title="三、编辑配置文件"></a>三、编辑配置文件</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/nginx/nginx3.png" alt="release-npm-1" title>                </div>                <div class="image-caption">release-npm-1</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/nginx/nginx4.png" alt="release-npm-1" title>                </div>                <div class="image-caption">release-npm-1</div>            </figure><p>最后    ctrl+s保存</p><h4 id="四、运行访问"><a href="#四、运行访问" class="headerlink" title="四、运行访问"></a>四、运行访问</h4><p>双击运行nginx.exe【后台任务管理器进程运行，无界面】<br>浏览器访问localhost即可访问项目根目录<br>完整接口访问如下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/nginx/nginx5.png" alt="release-npm-1" title>                </div>                <div class="image-caption">release-npm-1</div>            </figure></p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客论坛</title>
      <link href="/2018/10/09/%E5%8D%9A%E5%AE%A2%E8%AE%BA%E5%9D%9B/"/>
      <url>/2018/10/09/%E5%8D%9A%E5%AE%A2%E8%AE%BA%E5%9D%9B/</url>
      
        <content type="html"><![CDATA[<h3 id="个人常去的博客论坛【没有排名，O-∩-∩-O哈哈-】"><a href="#个人常去的博客论坛【没有排名，O-∩-∩-O哈哈-】" class="headerlink" title="个人常去的博客论坛【没有排名，O(∩_∩)O哈哈~】"></a>个人常去的博客论坛【没有排名，O(∩_∩)O哈哈~】</h3><ul><li><a href="https://juejin.im/explore/frontend" target="_blank" rel="noopener">掘金</a></li><li><a href="http://blog.csdn.net/" target="_blank" rel="noopener">CSDN</a></li><li><a href="http://web.jobbole.com/" target="_blank" rel="noopener">web前端-伯乐在线</a>【社区】</li><li><a href="https://yuchengkai.cn/docs/zh/" target="_blank" rel="noopener">InterviewMap</a>【面试图谱】</li><li><a href="https://www.zhangxinxu.com/wordpress/" target="_blank" rel="noopener">张鑫旭</a>【专治各种css兼容】</li><li><a href="http://www.ruanyifeng.com/home.html" target="_blank" rel="noopener">阮一峰大神</a></li><li><a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰大神</a>【js,python,git】</li><li><a href="https://github.com/stephentian/33-js-concepts/blob/master/README.md" target="_blank" rel="noopener">JavaScript开发者应懂的33个概念 </a>【js深入】</li></ul><a id="more"></a><h3 id="关于less【css预处理】"><a href="#关于less【css预处理】" class="headerlink" title="关于less【css预处理】"></a>关于less【css预处理】</h3><ul><li><a href="https://segmentfault.com/a/1190000012360995" target="_blank" rel="noopener">学习Less-看这篇就够了</a>【Less】</li></ul>]]></content>
      
      
      <categories>
          
          <category> blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm包的发布</title>
      <link href="/2018/09/12/npm%E5%8C%85%E7%9A%84%E5%8F%91%E5%B8%83/"/>
      <url>/2018/09/12/npm%E5%8C%85%E7%9A%84%E5%8F%91%E5%B8%83/</url>
      
        <content type="html"><![CDATA[<h3 id="首先去官网注册npm帐号"><a href="#首先去官网注册npm帐号" class="headerlink" title="首先去官网注册npm帐号"></a>首先去官网注册npm帐号</h3><p><a href="https://www.npmjs.com/" target="_blank" rel="noopener">去npm官网注册帐号</a></p><h3 id="然后在本地新建项目文件夹，例如shankun"><a href="#然后在本地新建项目文件夹，例如shankun" class="headerlink" title="然后在本地新建项目文件夹，例如shankun"></a>然后在本地新建项目文件夹，例如shankun</h3><pre><code>cd shankunnpm init      //初始化一个package.json</code></pre><a id="more"></a><ul><li>默认包名称 【一定得是npm库里不存在的，可以去<a href="https://www.npmjs.com" target="_blank" rel="noopener">npm官网</a>查询】</li><li>描述</li><li>版本号</li><li>入口文件(index.js)  默认</li><li>关键词</li><li>作者</li></ul><p>回车    初始化OK 【文件夹shankun下多了一个文件package.json】</p><h3 id="当前目录下新建index-js【初始化时指定的入口文件】"><a href="#当前目录下新建index-js【初始化时指定的入口文件】" class="headerlink" title="当前目录下新建index.js【初始化时指定的入口文件】"></a>当前目录下新建index.js【初始化时指定的入口文件】</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/npmImg/release-npm-1.png" alt="release-npm-1" title>                </div>                <div class="image-caption">release-npm-1</div>            </figure><h3 id="README-md-项目描述文件【非必选，不过作为一个专业的开发，你懂的】"><a href="#README-md-项目描述文件【非必选，不过作为一个专业的开发，你懂的】" class="headerlink" title="README.md  项目描述文件【非必选，不过作为一个专业的开发，你懂的】"></a>README.md  项目描述文件【非必选，不过作为一个专业的开发，你懂的】</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/npmImg/release-npm-2.png" alt="release-npm-2" title>                </div>                <div class="image-caption">release-npm-2</div>            </figure><h3 id="准备发布"><a href="#准备发布" class="headerlink" title="准备发布"></a>准备发布</h3><pre><code>cd shankunnpm login</code></pre><p><img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/npmImg/release-npm-3.png" alt="release-npm-3"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm publish// 发布成功如下图【每次发布版本号不能重复】</span><br><span class="line">// + 包名@版本号</span><br></pre></td></tr></table></figure></p><p><img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/npmImg/release-npm-4.png" alt="release-npm-4"></p><h3 id="移除包"><a href="#移除包" class="headerlink" title="移除包"></a>移除包</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm unpublish // 同发布</span><br><span class="line">// - 包名@版本号</span><br><span class="line">``` </span><br><span class="line">     </span><br><span class="line">###接下来 我们  就可以【npm install 包名称】去安装包了</span><br><span class="line">**官网查询结果如下图：**</span><br><span class="line">![release-npm-5](https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/npmImg/release-npm-5.png)</span><br></pre></td></tr></table></figure><p>-g    全局<br>–save    本地安装写进package.json  的  dependencies<br>–save-dev    本地安装写进package.json 的 devDependencies<br><code>`</code></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS生成随机字符串【字母数字】</title>
      <link href="/2018/09/07/JS%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%90%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97%E3%80%91/"/>
      <url>/2018/09/07/JS%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%90%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>JS生成随机字符串，可指定长度或范围，内容数组自定义<br><a id="more"></a></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">randomWord</span>(<span class="params">randomFlag, min, max</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">""</span>,</span><br><span class="line">        range = min,</span><br><span class="line">        arr = [<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'o'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'v'</span>, <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>, <span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>, <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'P'</span>, <span class="string">'Q'</span>, <span class="string">'R'</span>, <span class="string">'S'</span>, <span class="string">'T'</span>, <span class="string">'U'</span>, <span class="string">'V'</span>, <span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'Z'</span>];</span><br><span class="line">    <span class="comment">// 随机产生</span></span><br><span class="line">    <span class="keyword">if</span>(randomFlag)&#123;</span><br><span class="line">        range = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * (max-min)) + min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;range; i++)&#123;</span><br><span class="line">        pos = <span class="built_in">Math</span>.round(<span class="built_in">Math</span>.random() * (arr.length<span class="number">-1</span>));</span><br><span class="line">        str += arr[pos];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>1.生成3-32位随机串：randomWord(true, 3, 32)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">randomWord(true,3,32)</span><br><span class="line">//&quot;vlOlaIiS9wEwa&quot;</span><br></pre></td></tr></table></figure></p><p>2.生成43位随机串：randomWord(false, 43)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">randomWord(false,43)</span><br><span class="line">//&quot;DBYFsRVmmQ4TNy1tmb82NkqhAxPowYy13u74Hf5a9Oe&quot;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos 7 安装 node</title>
      <link href="/2018/09/03/centos-7-%E5%AE%89%E8%A3%85-node/"/>
      <url>/2018/09/03/centos-7-%E5%AE%89%E8%A3%85-node/</url>
      
        <content type="html"><![CDATA[<h3 id="友情链接【偷懒一波，哈哈】"><a href="#友情链接【偷懒一波，哈哈】" class="headerlink" title="友情链接【偷懒一波，哈哈】"></a>友情链接【偷懒一波，哈哈】</h3><p><a href="https://blog.csdn.net/jonatha_n/article/details/75271050" target="_blank" rel="noopener">centos7.x安装node</a><br><a id="more"></a></p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><hr><p>1.选择安装目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/src</span><br></pre></td></tr></table></figure></p><p>2.官网选择最新版本Linux Binaries 64-bit 【二进制的版本】，右键复制链接地址<br>命令行执行下载<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v8.11.4/node-v8.11.4-linux-x64.tar.xz</span><br></pre></td></tr></table></figure></p><p>3.解压安装包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xz -d node-v8.11.4-linux-x64.tar.xz// 先转成xz</span><br><span class="line">tar -xvf node-v8.11.4-linux-x64.tar// 再完成解压</span><br></pre></td></tr></table></figure></p><p>4.重命名为node<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv node-v8.11.4-linux-x64 node</span><br></pre></td></tr></table></figure></p><p>5.配置环境变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure></p><p>6.在文件最后面添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#set for nodejs</span><br><span class="line">export NODE_HOME=/usr/local/src/node</span><br><span class="line">export PATH=$NODE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></p><p>7.保存退出（:wq）执行命令是更改生效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></p><p>8.查看版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v// v8.11.4</span><br><span class="line">npm -v// 5.6.0</span><br></pre></td></tr></table></figure></p><hr><h3 id="最后安利一个终端神器"><a href="#最后安利一个终端神器" class="headerlink" title="最后安利一个终端神器"></a>最后安利一个终端神器</h3><p>MobaXterm<br>同时左侧sftp，右侧命令行操作<br>可在线拖拽式上传文件，还可用本地编辑器打开文件，真的神器</p>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS防抖与节流函数</title>
      <link href="/2018/08/31/JS%E9%98%B2%E6%8A%96/"/>
      <url>/2018/08/31/JS%E9%98%B2%E6%8A%96/</url>
      
        <content type="html"><![CDATA[<h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><p>多次事件触发后，事件处理函数只执行一次，并且是在触发操作结束时执行<br><a id="more"></a></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>对处理函数进行延时操作，若设定的延时到来之前，再次触发事件，则清楚上一次的延时操作定时器，重新定时。</p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>当输入完最后一个字才调用查询接口，这个时候适用延迟执行的防抖函数，它总是在一连串（间隔小于wait的）函数触发之后调用。</p><h3 id="点赞功能"><a href="#点赞功能" class="headerlink" title="点赞功能"></a>点赞功能</h3><p>当用户按下点赞的时候立即执行点赞回调，它总是在第一次调用，并且下一次调用必须与前一次调用的时间间隔大于wait才会触发。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防抖函数，返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;function&#125;</span> </span>func        回调函数【当使用es6的时候注意this指针，最好直接使用function传入】</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;number&#125;</span>   </span>wait        表示时间窗口的间隔</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;boolean&#125;</span>  </span>immediate   设置为ture时，是否立即调用函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;function&#125;</span>             </span>返回客户调用函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// immediate = true;   适合点赞或收藏时的立即执行</span></span><br><span class="line"><span class="comment">// immediate = false;  适合搜索时,输入结束时调用搜索</span></span><br><span class="line"><span class="keyword">let</span> debounce = <span class="function">(<span class="params">func, wait = <span class="number">50</span>, immediate = <span class="literal">true</span></span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> timer, context, args</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 延迟执行函数</span></span><br><span class="line">  <span class="keyword">const</span> later = <span class="function"><span class="params">()</span> =&gt;</span> setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 延迟函数执行完毕，清空缓存的定时器序号</span></span><br><span class="line">    timer = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 延迟执行的情况下，函数会在延迟函数中执行</span></span><br><span class="line">    <span class="comment">// 使用到之前缓存的参数和上下文</span></span><br><span class="line">    <span class="keyword">if</span> (!immediate) &#123;</span><br><span class="line">      func.apply(context, args)</span><br><span class="line">      context = args = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, wait)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这里返回的函数是每次实际调用的函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...params</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 如果没有创建延迟执行函数（later），就创建一个</span></span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      timer = later()</span><br><span class="line">      <span class="comment">// 如果是立即执行，调用函数</span></span><br><span class="line">      <span class="comment">// 否则缓存参数和调用上下文</span></span><br><span class="line">      <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">        func.apply(<span class="keyword">this</span>, params)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        context = <span class="keyword">this</span></span><br><span class="line">        args = params</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 如果已有延迟执行函数（later），调用的时候清除原来的并重新设定一个</span></span><br><span class="line">      <span class="comment">// 这样做延迟函数会重新计时</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      clearTimeout(timer)</span><br><span class="line">      timer = later()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><p>防抖动和节流本质是不一样的。防抖动是将多次执行变为最后一次执行，节流是将多次执行变成每隔一段时间执行。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个是用来获取当前时间戳的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_now</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> +<span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;function&#125;</span>   </span>func      回调函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;number&#125;</span>     </span>wait      表示时间窗口的间隔</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;object&#125;</span>     </span>options   如果想忽略开始函数的的调用，传入&#123;leading: false&#125;。</span></span><br><span class="line"><span class="comment"> *                                如果想忽略结尾函数的调用，传入&#123;trailing: false&#125;</span></span><br><span class="line"><span class="comment"> *                                两者不能共存，否则函数不能执行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;function&#125;</span>             </span>返回客户调用函数   </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> throttle = <span class="function">(<span class="params">func, wait, options</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> context, args, result;</span><br><span class="line">    <span class="keyword">var</span> timeout = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 之前的时间戳</span></span><br><span class="line">    <span class="keyword">var</span> previous = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 如果 options 没传则设为空对象</span></span><br><span class="line">    <span class="keyword">if</span> (!options) options = &#123;&#125;;</span><br><span class="line">    <span class="comment">// 定时器回调函数</span></span><br><span class="line">    <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 如果设置了 leading，就将 previous 设为 0</span></span><br><span class="line">      <span class="comment">// 用于下面函数的第一个 if 判断</span></span><br><span class="line">      previous = options.leading === <span class="literal">false</span> ? <span class="number">0</span> : _now();</span><br><span class="line">      <span class="comment">// 置空一是为了防止内存泄漏，二是为了下面的定时器判断</span></span><br><span class="line">      timeout = <span class="literal">null</span>;</span><br><span class="line">      result = func.apply(context, args);</span><br><span class="line">      <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 获得当前时间戳</span></span><br><span class="line">      <span class="keyword">var</span> now = _now();</span><br><span class="line">      <span class="comment">// 首次进入前者肯定为 true</span></span><br><span class="line">  <span class="comment">// 如果需要第一次不执行函数</span></span><br><span class="line">  <span class="comment">// 就将上次时间戳设为当前的</span></span><br><span class="line">      <span class="comment">// 这样在接下来计算 remaining 的值时会大于0</span></span><br><span class="line">      <span class="keyword">if</span> (!previous &amp;&amp; options.leading === <span class="literal">false</span>) previous = now;</span><br><span class="line">      <span class="comment">// 计算剩余时间</span></span><br><span class="line">      <span class="keyword">var</span> remaining = wait - (now - previous);</span><br><span class="line">      context = <span class="keyword">this</span>;</span><br><span class="line">      args = <span class="built_in">arguments</span>;</span><br><span class="line">      <span class="comment">// 如果当前调用已经大于上次调用时间 + wait</span></span><br><span class="line">      <span class="comment">// 或者用户手动调了时间</span></span><br><span class="line">   <span class="comment">// 如果设置了 trailing，只会进入这个条件</span></span><br><span class="line">  <span class="comment">// 如果没有设置 leading，那么第一次会进入这个条件</span></span><br><span class="line">  <span class="comment">// 还有一点，你可能会觉得开启了定时器那么应该不会进入这个 if 条件了</span></span><br><span class="line">  <span class="comment">// 其实还是会进入的，因为定时器的延时</span></span><br><span class="line">  <span class="comment">// 并不是准确的时间，很可能你设置了2秒</span></span><br><span class="line">  <span class="comment">// 但是他需要2.2秒才触发，这时候就会进入这个条件</span></span><br><span class="line">      <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span> || remaining &gt; wait) &#123;</span><br><span class="line">        <span class="comment">// 如果存在定时器就清理掉否则会调用二次回调</span></span><br><span class="line">        <span class="keyword">if</span> (timeout) &#123;</span><br><span class="line">          clearTimeout(timeout);</span><br><span class="line">          timeout = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        previous = now;</span><br><span class="line">        result = func.apply(context, args);</span><br><span class="line">        <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timeout &amp;&amp; options.trailing !== <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断是否设置了定时器和 trailing</span></span><br><span class="line">    <span class="comment">// 没有的话就开启一个定时器</span></span><br><span class="line">        <span class="comment">// 并且不能不能同时设置 leading 和 trailing</span></span><br><span class="line">        timeout = setTimeout(later, remaining);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h2 id="简版防抖节流"><a href="#简版防抖节流" class="headerlink" title="简版防抖节流"></a>简版防抖节流</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//函数节流</span><br><span class="line">const throttle = (fun, delay) =&gt; &#123;</span><br><span class="line">    let last = null</span><br><span class="line">    return () =&gt; &#123;</span><br><span class="line">        const now = + new Date()</span><br><span class="line">        if (now - last &gt; delay) &#123;</span><br><span class="line">            fun()</span><br><span class="line">            last = now</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//实例</span><br><span class="line">const throttleExample  = throttle(() =&gt; console.log(1), 1000)</span><br><span class="line">//调用</span><br><span class="line">throttleExample()</span><br><span class="line">throttleExample()</span><br><span class="line">throttleExample()</span><br><span class="line"></span><br><span class="line">//函数防抖</span><br><span class="line">cosnt debouce = (fun, delay) =&gt; &#123;</span><br><span class="line">    let timer = null</span><br><span class="line">    return () =&gt; &#123;</span><br><span class="line">        clearTimeout(timer)</span><br><span class="line">        timer = setTimeout(() =&gt; &#123;</span><br><span class="line">            fun()</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//实例</span><br><span class="line">const debouceExample = debouce(() =&gt; console.log(1), 1000)</span><br><span class="line">//调用</span><br><span class="line">debouceExample()</span><br><span class="line">debouceExample()</span><br><span class="line">debouceExample()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git ssh 添加</title>
      <link href="/2018/07/12/gitssh%E6%B7%BB%E5%8A%A0/"/>
      <url>/2018/07/12/gitssh%E6%B7%BB%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<p>1.打开git bash</p><p>2.配置git的name和email </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config global user.name <span class="string">"xushankun"</span></span><br><span class="line">$ git config global user.email <span class="string">"lovexsk@qq.com"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>3.生成密钥<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"lovexsk@qq.com"</span></span><br></pre></td></tr></table></figure></p><p>然后回车，然后会提示输入2次密码，密钥生成。</p><p>4.将密钥添加到ssh-agent<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p><p>5.登陆github，添加SSH将id_rsa.pub文件的内容添加到github</p><p>找到系统用户【当前系统用户】，.ssh  里的 id_rsa.pub文件内容   复制  到github</p><p>6.测试<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p><p>提示Hi,xxx</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>献给我的同代人  --舒婷</title>
      <link href="/2018/05/17/%E7%8C%AE%E7%BB%99%E6%88%91%E7%9A%84%E5%90%8C%E4%BB%A3%E4%BA%BA-%E8%88%92%E5%A9%B7/"/>
      <url>/2018/05/17/%E7%8C%AE%E7%BB%99%E6%88%91%E7%9A%84%E5%90%8C%E4%BB%A3%E4%BA%BA-%E8%88%92%E5%A9%B7/</url>
      
        <content type="html"><![CDATA[<p>他们在天上<br>愿为一颗星<br><a id="more"></a><br>他们在地上<br>愿为一盏灯<br>不怕显得多么渺小<br>只要尽其可能</p><p>唯因不被承认<br>才格外勇敢真诚<br>即使像眼泪一样跌碎<br>敏感的大地<br>处处仍有<br>持久而悠远的回声</p><p>为开拓心灵的处女地<br>走入禁区，也许——<br>就在那里牺牲<br>留下歪歪斜斜的脚印<br>给后来者<br>签署通行证</p><p>1980.4</p>]]></content>
      
      
      <categories>
          
          <category> 诗词文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bMAP简单使用【百度地图API】</title>
      <link href="/2018/05/04/bMAP%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E3%80%90%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEAPI%E3%80%91/"/>
      <url>/2018/05/04/bMAP%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8%E3%80%90%E7%99%BE%E5%BA%A6%E5%9C%B0%E5%9B%BEAPI%E3%80%91/</url>
      
        <content type="html"><![CDATA[<h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>申请百度地图api  key 【需要实名认证】</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"http://api.map.baidu.com/api?v=3.0&amp;ak=您的密钥"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>下面的变量 <strong>site</strong> 获取到当前坐标的 <strong>省 市 区 街道 街道号</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> geoc = <span class="keyword">new</span> BMap.Geocoder();</span><br><span class="line">    geoc.getLocation(<span class="keyword">new</span> BMap.Point(<span class="number">120.3066572944592</span>,<span class="number">31.56715494761835</span>), <span class="function"><span class="keyword">function</span>(<span class="params">rs</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> addComp = rs.addressComponents;</span><br><span class="line">        <span class="keyword">var</span> site = addComp.province + addComp.city + addComp.district + addComp.street + addComp.streetNumber;</span><br><span class="line">        <span class="built_in">console</span>.log(site);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 百度API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git基本使用命令</title>
      <link href="/2018/03/09/git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2018/03/09/git%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="git四个阶段的撤销更改"><a href="#git四个阶段的撤销更改" class="headerlink" title="git四个阶段的撤销更改"></a>git四个阶段的撤销更改</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="三个步骤"><a href="#三个步骤" class="headerlink" title="三个步骤"></a>三个步骤</h4><ul><li>工作区→暂存区→本地仓库→远程仓库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;content&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ol><li><code>git add.</code> 把所有文件放入<code>暂存区</code></li><li><code>git commit</code>把所有文件从<code>暂存区</code>提交进<code>本地仓库</code>；</li><li><code>git push</code>把所有文件从<code>本地仓库</code>推送进<code>远程仓库</code>。</li></ol><h4 id="四个区"><a href="#四个区" class="headerlink" title="四个区"></a>四个区</h4><p>git相比于svn等传统的版本管理工具，多了一个<code>暂存区（state）</code>的概念</p><ul><li>工作区（Working Area）</li><li>暂存区（State）</li><li>本地仓库（Local Repository）</li><li>远程仓库 （Remote Repository）</li></ul><h4 id="五种状态"><a href="#五种状态" class="headerlink" title="五种状态"></a>五种状态</h4><p>进入每一个区都会有一种状态，加上初始状态，刚好5个状态，分别如下：</p><ul><li>未修改（Origin）</li><li>已修改（Modified）</li><li>已暂存（Stated）</li><li>已提交（Commited）</li><li>已推送（Pushed）</li></ul><h3 id="检查修改"><a href="#检查修改" class="headerlink" title="检查修改"></a>检查修改</h3><h4 id="已修改，未暂存"><a href="#已修改，未暂存" class="headerlink" title="已修改，未暂存"></a>已修改，未暂存</h4><p>当我们修改了某个文件，但是还没有<code>git add .</code>之前，我们用<code>git diff</code>命令来检查哪些文件内容被修改了【还未进入<code>暂存区</code>】</p><h4 id="已暂存，未提交"><a href="#已暂存，未提交" class="headerlink" title="已暂存，未提交"></a>已暂存，未提交</h4><p>现在我们把 修改 放入<code>暂存区</code>看看。先执行 <code>git add .</code>，再执行 <code>git diff</code>，会发现没有任何结果。【说明：<code>git diff</code>只检查<code>工作区</code>和<code>暂存区</code>之间的差。如果我们想看到<code>暂存区</code>和<code>本地仓库</code>间的差异，使用<code>git diff cached</code>】</p><h4 id="已提交，未推送"><a href="#已提交，未推送" class="headerlink" title="已提交，未推送"></a>已提交，未推送</h4><p>现在我们把修改从<code>暂存区</code>提交到<code>本地仓库</code>，先执行<code>git commit</code>,再执行<code>git diff --cached</code>，没有差异。执行<code>git diff master origin/master</code>，我们可以看到差异。<code>master</code>是你的<code>本地仓库</code>，而<code>origin/master</code>是你的<code>远程仓库</code>,<code>master</code>是分支的意思，因为我们都在主分支上工作，而<code>origin</code>就代表远程。</p><h4 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h4><p>如果我们只在编辑器里修改了文件，但还没有执行<code>git add .</code>,这时我们的文件还在<code>工作区</code>，并没有进入<code>暂存区</code>。我们可以用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 或 git reset --hard 来进行撤销操作，</span><br></pre></td></tr></table></figure></p><p>修改后<code>git add .</code>前进一步，<code>git checkout</code>后退一步撤销刚才的修改。</p><h4 id="已暂存，本地已提交"><a href="#已暂存，本地已提交" class="headerlink" title="已暂存，本地已提交"></a>已暂存，本地已提交</h4><p>你已经执行了<code>git add .</code>,但还没执行<code>git commit -m &#39;comment&#39;</code>，这时候意识到错误，想要撤销可以执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset</span><br><span class="line">git checkout</span><br></pre></td></tr></table></figure></p><p>或<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard</span><br></pre></td></tr></table></figure></p><h4 id="已提交，未推送-1"><a href="#已提交，未推送-1" class="headerlink" title="已提交，未推送"></a>已提交，未推送</h4><p>执行了<code>git add .</code>，又执行了<code>git commit</code> ,这时候你的代码进入了<code>本地仓库</code>，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure></p><p>已推送的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^//先恢复本地仓库</span><br><span class="line">git push -f//强制push到远程仓库</span><br></pre></td></tr></table></figure></p><hr><h2 id="fatal-Authentication-failed-for又不弹出用户名和密码"><a href="#fatal-Authentication-failed-for又不弹出用户名和密码" class="headerlink" title="fatal: Authentication failed for又不弹出用户名和密码"></a>fatal: Authentication failed for又不弹出用户名和密码</h2><h3 id="重置"><a href="#重置" class="headerlink" title="重置"></a>重置</h3><p>切换执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --system --unset credential.helper</span><br></pre></td></tr></table></figure></p><p>然后就可以重新提交用户名和密码进行提交了</p><hr><h2 id="添加本地项目到git【本地已配置用户名及密码】"><a href="#添加本地项目到git【本地已配置用户名及密码】" class="headerlink" title="添加本地项目到git【本地已配置用户名及密码】"></a>添加本地项目到git【本地已配置用户名及密码】</h2><p>命令行中执行以下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init   ----------初始化git仓库</span><br><span class="line">git remote add origin 你的项目地址 //注:项目地址形式为:http://git.oschina.net/xxx/xxx.git或者 git@git.oschina.net:xxx/xxx.git     用来连接远程码云</span><br></pre></td></tr></table></figure></p><p>开始第一次上传你的项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .      --将项目中的所有文件上传</span><br><span class="line">git commit -m &apos;对上传文件的注释&apos;</span><br><span class="line">git push origin master    --正式上传至码云中，若上传有问题，可以试试   git push origin master -f 表示舍弃线上的文件，强制推送</span><br></pre></td></tr></table></figure></p><p>推送成功后git pull时【需要进行一次远程分支和本地分支的关联】<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/gitImg/git-branch1.png" alt="git-branch-1.png" title>                </div>                <div class="image-caption">git-branch-1.png</div>            </figure><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line">git branch --set-upstream-to=remotes/origin/master master</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/gitImg/git-branch2.png" alt="git-branch-2.png" title>                </div>                <div class="image-caption">git-branch-2.png</div>            </figure><hr><h2 id="git回滚到任意版本"><a href="#git回滚到任意版本" class="headerlink" title="git回滚到任意版本"></a>git回滚到任意版本</h2><h3 id="先显示提交的log"><a href="#先显示提交的log" class="headerlink" title="先显示提交的log"></a>先显示提交的log</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ git log -3</span><br><span class="line">commit 4dc08bb8996a6ee02f</span><br><span class="line">Author: Mark &lt;xxx@xx.com&gt;</span><br><span class="line">Date:   Wed Sep 7 08:08:53 2016 +0800</span><br><span class="line"></span><br><span class="line">    xxxxx</span><br><span class="line"></span><br><span class="line">commit 9cac9ba76574da2167</span><br><span class="line">Author: xxx&lt;xx@qq.com&gt;</span><br><span class="line">Date:   Tue Sep 6 22:18:59 2016 +0800</span><br><span class="line"></span><br><span class="line">    improved the requst</span><br><span class="line"></span><br><span class="line">commit e377f60e28c8b84158</span><br><span class="line">Author: xxx&lt;xxx@qq.com&gt;</span><br><span class="line">Date:   Tue Sep 6 14:42:44 2016 +0800</span><br><span class="line"></span><br><span class="line">    changed the password from empty to max123</span><br></pre></td></tr></table></figure><h3 id="回滚到指定版本"><a href="#回滚到指定版本" class="headerlink" title="回滚到指定版本"></a>回滚到指定版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard e377f60e28c8b84158</span><br></pre></td></tr></table></figure><h3 id="强制提交"><a href="#强制提交" class="headerlink" title="强制提交"></a>强制提交</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -f origin master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NPM正确使用姿势</title>
      <link href="/2018/03/07/NPM%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/"/>
      <url>/2018/03/07/NPM%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/</url>
      
        <content type="html"><![CDATA[<h3 id="npm、cnpm-安装"><a href="#npm、cnpm-安装" class="headerlink" title="npm、cnpm 安装"></a>npm、cnpm 安装</h3><ul><li>Node.js：<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">https://nodejs.org/zh-cn/</a></li><li>淘宝NPM：<a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a></li><li>包括更改默认的C盘为其它盘【所有npm全局包的根目录】，以及npm，cnpm环境变量的配置</li><li>安装教程：<a href="https://www.cnblogs.com/yominhi/p/7039795.html" target="_blank" rel="noopener">https://www.cnblogs.com/yominhi/p/7039795.html</a><a id="more"></a></li></ul><h3 id="npm安装模块"><a href="#npm安装模块" class="headerlink" title="npm安装模块"></a>npm安装模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install xxx// 安装模块到当前node_modules【不写入package.json文件】</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g xxx// 全局安装模块</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install xxx --save   // 写入的package.json的”dependencies”中</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install xxx --save-dev   // 写入的package.json的”devDependencies”中</span><br></pre></td></tr></table></figure><h3 id="npm删除模块"><a href="#npm删除模块" class="headerlink" title="npm删除模块"></a>npm删除模块</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall xxx // 删除模块xxx</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall xxx -g // 删除全局模块xxx</span><br></pre></td></tr></table></figure><ul><li>提示：删除模块应当安装当初安装的方式将 <code>install</code> 改为 <code>uninstall</code> 才能正确删除</li></ul><h3 id="other命令"><a href="#other命令" class="headerlink" title="other命令"></a>other命令</h3><ul><li>npm init -y  【 -y 表示跳过设置，直接初始化默认值】   </li><li>例如npm install express 就会默认安装express的最新版本，也可以通过在后面加版本号的方式安装指定版本，如npm install <a href="mailto:express@3.0.6" target="_blank" rel="noopener">express@3.0.6</a></li><li>npm init  会引导你创建一个package.json文件，包括名称、版本、作者这些信息等</li><li>npm remove <name>移除</name></li><li>npm update <name>更新</name></li><li>npm ls 列出当前安装的了所有包</li><li>npm root 查看当前包的安装路径</li><li>npm root -g  查看全局的包的安装路径</li><li>npm help  帮助，如果要单独查看install命令的帮助，可以使用的npm help install</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面朝大海，春暖花开            --海子</title>
      <link href="/2018/03/05/%E9%9D%A2%E6%9C%9D%E5%A4%A7%E6%B5%B7%E6%98%A5%E6%9A%96%E8%8A%B1%E5%BC%80--%E6%B5%B7%E5%AD%90/"/>
      <url>/2018/03/05/%E9%9D%A2%E6%9C%9D%E5%A4%A7%E6%B5%B7%E6%98%A5%E6%9A%96%E8%8A%B1%E5%BC%80--%E6%B5%B7%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<p>从明天起，做一个幸福的人<br>喂马、劈柴，周游世界<br>从明天起，关心粮食和蔬菜<br><a id="more"></a><br>我有一所房子，面朝大海，春暖花开</p><p>从明天起，和每一个亲人通信<br>告诉他们我的幸福<br>那幸福的闪电告诉我的<br>我将告诉每一个人</p><p>给每一条河每一座山取一个温暖的名字<br>陌生人，我也为你祝福<br>愿你有一个灿烂的前程<br>愿你有情人终成眷属<br>愿你在尘世获得幸福<br>我只愿面朝大海，春暖花开</p>]]></content>
      
      
      <categories>
          
          <category> 诗词文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
