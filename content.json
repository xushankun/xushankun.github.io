{"meta":{"title":"我是文盲我怕谁K","subtitle":null,"description":"web前端开发","author":"Xu Shan Kun","url":"https://shankun.top"},"pages":[{"title":"My Blog Name | 404","date":"2024-03-25T06:02:15.148Z","updated":"2024-03-25T06:02:15.148Z","comments":true,"path":"404.html","permalink":"https://shankun.top/404.html","excerpt":"","text":"CSS 404滚动框 body { background: #eee; height: 100vh; overflow: hidden; display: flex; font-family: 'Anton', sans-serif; justify-content: center; align-items: center; -webkit-perspective: 1000px; perspective: 1000px; } div { -webkit-transform-style: preserve-3d; transform-style: preserve-3d; } .rail { position: absolute; width: 100%; height: 100%; display: flex; justify-content: center; align-items: center; -webkit-transform: rotateX(-30deg) rotateY(-30deg); transform: rotateX(-30deg) rotateY(-30deg); } .rail .stamp { position: absolute; width: 200px; height: 200px; display: flex; justify-content: center; align-items: center; background: #141414; color: #fff; font-size: 7rem; } .rail .stamp:nth-child(1) { -webkit-animation: stampSlide 40000ms -2300ms linear infinite; animation: stampSlide 40000ms -2300ms linear infinite; } .rail .stamp:nth-child(2) { -webkit-animation: stampSlide 40000ms -4300ms linear infinite; animation: stampSlide 40000ms -4300ms linear infinite; } .rail .stamp:nth-child(3) { -webkit-animation: stampSlide 40000ms -6300ms linear infinite; animation: stampSlide 40000ms -6300ms linear infinite; } .rail .stamp:nth-child(4) { -webkit-animation: stampSlide 40000ms -8300ms linear infinite; animation: stampSlide 40000ms -8300ms linear infinite; } .rail .stamp:nth-child(5) { -webkit-animation: stampSlide 40000ms -10300ms linear infinite; animation: stampSlide 40000ms -10300ms linear infinite; } .rail .stamp:nth-child(6) { -webkit-animation: stampSlide 40000ms -12300ms linear infinite; animation: stampSlide 40000ms -12300ms linear infinite; } .rail .stamp:nth-child(7) { -webkit-animation: stampSlide 40000ms -14300ms linear infinite; animation: stampSlide 40000ms -14300ms linear infinite; } .rail .stamp:nth-child(8) { -webkit-animation: stampSlide 40000ms -16300ms linear infinite; animation: stampSlide 40000ms -16300ms linear infinite; } .rail .stamp:nth-child(9) { -webkit-animation: stampSlide 40000ms -18300ms linear infinite; animation: stampSlide 40000ms -18300ms linear infinite; } .rail .stamp:nth-child(10) { -webkit-animation: stampSlide 40000ms -20300ms linear infinite; animation: stampSlide 40000ms -20300ms linear infinite; } .rail .stamp:nth-child(11) { -webkit-animation: stampSlide 40000ms -22300ms linear infinite; animation: stampSlide 40000ms -22300ms linear infinite; } .rail .stamp:nth-child(12) { -webkit-animation: stampSlide 40000ms -24300ms linear infinite; animation: stampSlide 40000ms -24300ms linear infinite; } .rail .stamp:nth-child(13) { -webkit-animation: stampSlide 40000ms -26300ms linear infinite; animation: stampSlide 40000ms -26300ms linear infinite; } .rail .stamp:nth-child(14) { -webkit-animation: stampSlide 40000ms -28300ms linear infinite; animation: stampSlide 40000ms -28300ms linear infinite; } .rail .stamp:nth-child(15) { -webkit-animation: stampSlide 40000ms -30300ms linear infinite; animation: stampSlide 40000ms -30300ms linear infinite; } .rail .stamp:nth-child(16) { -webkit-animation: stampSlide 40000ms -32300ms linear infinite; animation: stampSlide 40000ms -32300ms linear infinite; } .rail .stamp:nth-child(17) { -webkit-animation: stampSlide 40000ms -34300ms linear infinite; animation: stampSlide 40000ms -34300ms linear infinite; } .rail .stamp:nth-child(18) { -webkit-animation: stampSlide 40000ms -36300ms linear infinite; animation: stampSlide 40000ms -36300ms linear infinite; } .rail .stamp:nth-child(19) { -webkit-animation: stampSlide 40000ms -38300ms linear infinite; animation: stampSlide 40000ms -38300ms linear infinite; } .rail .stamp:nth-child(20) { -webkit-animation: stampSlide 40000ms -40300ms linear infinite; animation: stampSlide 40000ms -40300ms linear infinite; } @-webkit-keyframes stampSlide { 0% { -webkit-transform: rotateX(90deg) rotateZ(-90deg) translateZ(-200px) translateY(130px); transform: rotateX(90deg) rotateZ(-90deg) translateZ(-200px) translateY(130px); } 100% { -webkit-transform: rotateX(90deg) rotateZ(-90deg) translateZ(-200px) translateY(-3870px); transform: rotateX(90deg) rotateZ(-90deg) translateZ(-200px) translateY(-3870px); } } @keyframes stampSlide { 0% { -webkit-transform: rotateX(90deg) rotateZ(-90deg) translateZ(-200px) translateY(130px); transform: rotateX(90deg) rotateZ(-90deg) translateZ(-200px) translateY(130px); } 100% { -webkit-transform: rotateX(90deg) rotateZ(-90deg) translateZ(-200px) translateY(-3870px); transform: rotateX(90deg) rotateZ(-90deg) translateZ(-200px) translateY(-3870px); } } .world { -webkit-transform: rotateX(-30deg) rotateY(-30deg); transform: rotateX(-30deg) rotateY(-30deg); } .world .forward { position: absolute; -webkit-animation: slide 2000ms linear infinite; animation: slide 2000ms linear infinite; } .world .box { width: 200px; height: 200px; -webkit-transform-origin: 100% 100%; transform-origin: 100% 100%; -webkit-animation: roll 2000ms cubic-bezier(1, 0.01, 1, 1) infinite; animation: roll 2000ms cubic-bezier(1, 0.01, 1, 1) infinite; } .world .box .wall { position: absolute; width: 200px; height: 200px; background: rgba(10, 10, 10, 0.8); border: 1px solid #fafafa; box-sizing: border-box; } .world .box .wall::before { content: ''; position: absolute; width: 100%; height: 100%; display: flex; justify-content: center; align-items: center; color: #fff; font-size: 7rem; } .world .box .wall:nth-child(1) { -webkit-transform: translateZ(100px); transform: translateZ(100px); } .world .box .wall:nth-child(2) { -webkit-transform: rotateX(180deg) translateZ(100px); transform: rotateX(180deg) translateZ(100px); } .world .box .wall:nth-child(3) { -webkit-transform: rotateX(90deg) translateZ(100px); transform: rotateX(90deg) translateZ(100px); } .world .box .wall:nth-child(3)::before { -webkit-transform: rotateX(180deg) rotateZ(90deg) translateZ(-1px); transform: rotateX(180deg) rotateZ(90deg) translateZ(-1px); -webkit-animation: zeroFour 4000ms -2000ms linear infinite; animation: zeroFour 4000ms -2000ms linear infinite; } .world .box .wall:nth-child(4) { -webkit-transform: rotateX(-90deg) translateZ(100px); transform: rotateX(-90deg) translateZ(100px); } .world .box .wall:nth-child(4)::before { -webkit-transform: rotateX(180deg) rotateZ(-90deg) translateZ(-1px); transform: rotateX(180deg) rotateZ(-90deg) translateZ(-1px); -webkit-animation: zeroFour 4000ms -2000ms linear infinite; animation: zeroFour 4000ms -2000ms linear infinite; } .world .box .wall:nth-child(5) { -webkit-transform: rotateY(90deg) translateZ(100px); transform: rotateY(90deg) translateZ(100px); } .world .box .wall:nth-child(5)::before { -webkit-transform: rotateX(180deg) translateZ(-1px); transform: rotateX(180deg) translateZ(-1px); -webkit-animation: zeroFour 4000ms linear infinite; animation: zeroFour 4000ms linear infinite; } .world .box .wall:nth-child(6) { -webkit-transform: rotateY(-90deg) translateZ(100px); transform: rotateY(-90deg) translateZ(100px); } .world .box .wall:nth-child(6)::before { -webkit-transform: rotateX(180deg) rotateZ(180deg) translateZ(-1px); transform: rotateX(180deg) rotateZ(180deg) translateZ(-1px); -webkit-animation: zeroFour 4000ms linear infinite; animation: zeroFour 4000ms linear infinite; } @-webkit-keyframes zeroFour { 0% { content: '4'; } 100% { content: '0'; } } @keyframes zeroFour { 0% { content: '4'; } 100% { content: '0'; } } @-webkit-keyframes roll { 0% { -webkit-transform: rotateZ(0deg); transform: rotateZ(0deg); } 85% { -webkit-transform: rotateZ(90deg); transform: rotateZ(90deg); } 87% { -webkit-transform: rotateZ(88deg); transform: rotateZ(88deg); } 90% { -webkit-transform: rotateZ(90deg); transform: rotateZ(90deg); } 100% { -webkit-transform: rotateZ(90deg); transform: rotateZ(90deg); } } @keyframes roll { 0% { -webkit-transform: rotateZ(0deg); transform: rotateZ(0deg); } 85% { -webkit-transform: rotateZ(90deg); transform: rotateZ(90deg); } 87% { -webkit-transform: rotateZ(88deg); transform: rotateZ(88deg); } 90% { -webkit-transform: rotateZ(90deg); transform: rotateZ(90deg); } 100% { -webkit-transform: rotateZ(90deg); transform: rotateZ(90deg); } } @-webkit-keyframes slide { 0% { -webkit-transform: translateX(0); transform: translateX(0); } 100% { -webkit-transform: translateX(-200px); transform: translateX(-200px); } } @keyframes slide { 0% { -webkit-transform: translateX(0); transform: translateX(0); } 100% { -webkit-transform: translateX(-200px); transform: translateX(-200px); } } 4 0 4 0 4 0 4 0 4 0 4 0 4 0 4 0 4 0 4 0"},{"title":"My Blog Name | 404","date":"2024-03-25T06:02:15.167Z","updated":"2024-03-25T06:02:15.167Z","comments":true,"path":"baidu_verify_GN7qDWz872.html","permalink":"https://shankun.top/baidu_verify_GN7qDWz872.html","excerpt":"","text":"GN7qDWz872"},{"title":"请用心听Music","date":"2018-03-07T06:15:33.000Z","updated":"2024-03-25T06:02:15.166Z","comments":true,"path":"about/index.html","permalink":"https://shankun.top/about/index.html","excerpt":"","text":"网易云ID：请用心听Music 这是我比较喜欢的一首音乐了 特别是离开或归途的路上，听着很有感觉 扫描下方二维码，关注个人小程序【硬核天地】"},{"title":"","date":"2024-03-25T06:02:15.168Z","updated":"2024-03-25T06:02:15.168Z","comments":false,"path":"categories/index.html","permalink":"https://shankun.top/categories/index.html","excerpt":"","text":""},{"title":"","date":"2024-03-25T06:02:15.169Z","updated":"2024-03-25T06:02:15.169Z","comments":false,"path":"tags/index.html","permalink":"https://shankun.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"我曾经七次鄙视自己的灵魂 --纪伯伦","slug":"我曾经七次鄙视自己的灵魂","date":"2021-03-15T02:47:00.000Z","updated":"2024-03-25T06:02:15.163Z","comments":true,"path":"2021/03/15/我曾经七次鄙视自己的灵魂/","link":"","permalink":"https://shankun.top/2021/03/15/我曾经七次鄙视自己的灵魂/","excerpt":"它本可进取，却故作谦卑","text":"它本可进取，却故作谦卑 它空虚时，用爱欲来填充 困难和容易之间，它选择容易 它犯错，却借由别人也会犯错来宽慰自己 它自由软弱，却把它认为是生命的坚韧 它鄙夷一张丑恶的嘴脸，却不知那是自己面具中的一副 它在生活污泥中，虽不甘心，却又畏首畏尾","categories":[{"name":"诗词文章","slug":"诗词文章","permalink":"https://shankun.top/categories/诗词文章/"}],"tags":[{"name":"诗词","slug":"诗词","permalink":"https://shankun.top/tags/诗词/"}]},{"title":"星际穿越","slug":"星际穿越","date":"2020-09-28T02:58:00.000Z","updated":"2024-03-25T06:02:15.163Z","comments":true,"path":"2020/09/28/星际穿越/","link":"","permalink":"https://shankun.top/2020/09/28/星际穿越/","excerpt":"简介【网络转载】星际穿越里最震撼的场景就是，浩瀚星空下，低沉诵读狄兰·托马斯这首诗，迸发不屈之力。这部电影隐含着主题应该是：临终。 一个临终的地球；布兰德教授临终的坦白，艾米莉亚临终之路是飞向自己爱人的星球；曼恩不甘死于异星，临终前最后一句话是：人类的未来……","text":"简介【网络转载】星际穿越里最震撼的场景就是，浩瀚星空下，低沉诵读狄兰·托马斯这首诗，迸发不屈之力。这部电影隐含着主题应该是：临终。 一个临终的地球；布兰德教授临终的坦白，艾米莉亚临终之路是飞向自己爱人的星球；曼恩不甘死于异星，临终前最后一句话是：人类的未来……库珀临终刹那回到女儿的小屋，父母要当孩子的幽灵。 布兰德教授说，我害怕的不是引力，是时间。因为时间会让人走向终结。 物理学上，能够击败时间的力量只有引力和光。 而光也无法逃离黑洞，恒星在坠入黑洞前会爆发最后的能力，这才是：rage against the dying of the light. 这首诗是写于1951年，狄兰·托马斯用以鼓励病重的父亲，而他自己三年后死于连续喝了18杯白兰地。 诺兰赋予了这首诗新的含义，不仅仅是某个人的临终怒吼，还有整个人类、星球的命运，又能隐喻光堙没于黑洞的瞬间。翻译的难度也很大，版本非常多。 最喜欢高晓松的版本。 诗作原文Do Not Go Gentle Into That Good Night – Dylan Thomas Do not go gentle into that good night, Old age should burn and rave at the close of day; Rage, rage against the dying of the light. Though wise men at their end know dark is right, Because their words had forked no lightning they Do not go gentle into that good night. Good men, the last wave by, crying how bright Their frail deeds might have danced in a green bay, Rage, rage against the dying of the light. Wild men who caught and sang the sun in flight, And learn, too late, they grieved it on its way, Do not go gentle into that good night. Grave men, near death, who see with blinding sight Blind eyes could blaze like meteors and be gay, Rage, rage against the dying of the light. And you, my father, there on the sad height, Curse, bless, me now with your fierce tears, I pray, Do not go gentle into that good night, Rage, rage against the dying of the light. 中文翻译：高晓松版绝不向黑夜请安 老朽请于白日尽头涅槃 咆哮于光之消散 先哲虽败于幽暗 诗歌终不能将苍穹点燃 绝不向黑夜请安 贤者舞蹈于碧湾 为惊涛淹没的善行哭喊 咆哮于光之消散 狂者如夸父逐日 高歌中顿觉迟来的伤感 绝不向黑夜请安 逝者于临终迷幻 盲瞳怒放出流星的灿烂 咆哮于光之消散 那么您，我垂垂将死的父亲 请掬最后一捧热泪降临 请诅咒，请保佑 我祈愿，绝不向 黑夜请安，咆哮 于光之消散","categories":[{"name":"诗词文章","slug":"诗词文章","permalink":"https://shankun.top/categories/诗词文章/"}],"tags":[{"name":"诗词","slug":"诗词","permalink":"https://shankun.top/tags/诗词/"}]},{"title":"vue+axios处理流文件图片","slug":"vue-axios处理流文件图片","date":"2019-07-22T04:27:00.000Z","updated":"2024-03-25T06:02:15.159Z","comments":true,"path":"2019/07/22/vue-axios处理流文件图片/","link":"","permalink":"https://shankun.top/2019/07/22/vue-axios处理流文件图片/","excerpt":"说明vue axios 后端接口返回一个流文件图片，前端base64解析直接展示","text":"说明vue axios 后端接口返回一个流文件图片，前端base64解析直接展示 代码1234567891011getImg(filePath) &#123; this.$http.get(&apos;/img&apos;, &#123; responseType: &apos;arraybuffer&apos; &#125;).then(response =&gt; &#123; return &apos;data:image/png;base64,&apos; + btoa( new Uint8Array(response.data) .reduce((data, byte) =&gt; data + String.fromCharCode(byte), &apos;&apos;)) &#125;).then(data =&gt; &#123; // console.log(data) &#125;)&#125; 使用如下","categories":[{"name":"前端","slug":"前端","permalink":"https://shankun.top/categories/前端/"}],"tags":[{"name":"axios","slug":"axios","permalink":"https://shankun.top/tags/axios/"}]},{"title":"centos安装宝塔及https证书","slug":"centos安装宝塔及https证书","date":"2019-07-16T01:52:00.000Z","updated":"2024-03-25T06:02:15.154Z","comments":true,"path":"2019/07/16/centos安装宝塔及https证书/","link":"","permalink":"https://shankun.top/2019/07/16/centos安装宝塔及https证书/","excerpt":"注册宝塔账号并安装宝塔 注册账号地址【后面会用到】 github链接","text":"注册宝塔账号并安装宝塔 注册账号地址【后面会用到】 github链接 centos使用如下命令安装： 1yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh 安装完成后 保存下方账号：【你的ip地址+默认端口号8888】 登录宝塔面板安装nginx这里我们使用安装后得到的账号登录，在面板的软件管理安装我们需要的软件到服务器 首页添加网站 申请免费证书【let’s encrypt】并开启1.申请证书【这里可能需要登录，使用我们前面注册的账号】 2.切换到其他证书保存【实则是保存文件到服务器】 nginx配置文件修改12345678910111213server &#123; listen 80; server_name xx.xxx.com; rewrite ^ https://$http_host$request_uri? permanent; &#125;server&#123; listen 443 ssl; server_name xx.xxx.com; location / &#123; proxy_pass http://localhost:3001/; &#125;&#125; 重启nginx【结束】回到首页，打开nginx面板，先后点击重载配置和重启","categories":[{"name":"服务器","slug":"服务器","permalink":"https://shankun.top/categories/服务器/"}],"tags":[{"name":"宝塔","slug":"宝塔","permalink":"https://shankun.top/tags/宝塔/"},{"name":"https","slug":"https","permalink":"https://shankun.top/tags/https/"},{"name":"nginx","slug":"nginx","permalink":"https://shankun.top/tags/nginx/"}]},{"title":"微信小程序云开发","slug":"小程序云开发","date":"2019-04-12T01:35:00.000Z","updated":"2024-03-25T06:02:15.161Z","comments":true,"path":"2019/04/12/小程序云开发/","link":"","permalink":"https://shankun.top/2019/04/12/小程序云开发/","excerpt":"初始化项目起步说明【非小白教程】 适合人群【建议快速看文档，对着写一遍】 看过官方文档，并简单的写过 起步教程 云开发文档 熟悉vue/es6","text":"初始化项目起步说明【非小白教程】 适合人群【建议快速看文档，对着写一遍】 看过官方文档，并简单的写过 起步教程 云开发文档 熟悉vue/es6 小程序注册【微信公众平台】 获取appid【微信公众平台-开发-开发设置】 新建小程序云开发项目 新建项目选择一个空目录，填入 AppID（使用云开发能力必须填写 AppID） 勾选创建 “小程序云开发 ” 点击新建即可得到一个展示云开发基础能力的示例小程序。 该小程序与普通 QuickStart 小程序有以下不同需注意： 无游客模式、也不可以使用测试号 project.config.json【工具配置】 中增加了字段 cloudfunctionRoot 用于指定存放云函数的目录 cloudfunctionRoot 指定的目录有特殊的图标 云开发能力从基础库 2.2.3 开始支持 未指定环境【第一次使用云开发】 在使用云开发能力之前需要先开通云开发 点击云开发按钮，继续点击开通，继续同意条款 新建环境注意事项：指定环境名称，且后面 不可更改，只能建2个【环境ID是根据环境名称自动生成的】 修改app.js 初始化【数据库环境ID】 环境ID如下： 项目目录初始化后的目录 新建页面示例 js【页面逻辑】 json【页面配置】 wxml【页面结构】 wxss【页面样式表】 app.json【ctrl+s保存】 新建util文件夹utils文件代码地址 入口文件app.js公共js全局引入，也可以在各个页面单独引用app.js代码代码地址 配置文件全局配置【指的就是app.json】 这里只写了一些项目用到的，其它配置参照官方文档 页面配置【页面文件json格式结尾的】【约定大于配置】 页面配置只能设置app.json中部分 window 配置项的内容，页面中配置项会覆盖 app.json 的 window 中相同的配置项。 云开发【包括云函数】前面已经介绍了小程序端的一些基本配置及文件的介绍；这篇来讲一下云开发，在初始化项目时已经开通了云开发功能。 云开发介绍 三大基础能力支持： 云函数：在云端运行的代码，微信私有协议天然鉴权，开发者只需编写自身业务逻辑代码 数据库：一个既可在小程序前端操作，也能在云函数中读写的 JSON 数据库 存储：在小程序前端直接上传/下载云端文件，在云开发控制台可视化管理【类似七牛的对象存储】 云开发控制台 数据库周边 每条记录都有一个_id字段用以唯一标志一条记录 一个_openid字段用以标志记录的创建者，即小程序的用户【仅在小程序端创建才会生成此字段】 开发者可以自定义 _id，但不可自定义和修改 _openid 数据库 API 分为小程序端和服务端两部分，服务端相对小程序端操作，服务端权限大且更安全 权限控制 数据库的权限分为小程序端和管理端，管理端包括云函数端和控制台。 小程序端运行在小程序中，读写数据库受权限控制限制， 管理端运行在云函数上，拥有所有读写数据库的权限。云控制台的权限同管理端，拥有所有权限。 具体权限见云开发文档 开发示例注意事项：使用集合必须是已存在的，所以得提前添加 创建第一个集合 打开控制台，选择 “数据库” 标签页，通过 “添加集合” 入口创建一个集合。 界面中我们可以添加记录、查找记录、管理索引和管理权限。 小程序端操作数据 以下第一条红框代码：调用获取默认环境的数据库的引用【用node写过接口的同学可能一下就看明白了】 服务端操作数据【云开发】 新建云函数 右键云函数根目录文件夹： 新建Node.js云函数，初始化如下 云函数同步 右键云函数文件夹：上传并部署：云端安装所有依赖 云函数使用 云函数可相互间调用 云函数可小程序端使用，小程序端使用如下： 其它问题汇总小程序端 自定义组件以及第三方组件的使用【见项目pages/index代码】 云开发 多个云函数环境切换繁琐，不能统一配置【感觉后面官方会退出更合适的方法】 解决办法：tcb-router 思路：建立一个云函数，通过不同的url寻找方法 相关链接 本地调试繁琐没有尝试--! 入门项目【硬核天地】 git源码 扫码体验： 安装使用 克隆代码到本地 1git clone https://github.com/xushankun/yhtd-mp.git 打开“微信开发者工具”，导入项目 导入时填写自己的appid 或者导入后project.config.json 里更改appid 环境ID改为自己的【包括每个云函数index.js里的环境ID】 数据库添加集合如下： defriend【黑名单列表】 kklist【帖子列表】 services【功能控制开关】 字段：”isRelease”:true users【用户列表】 isRelease发布状态时改为false【规避微信审核，因为个人开发者禁止用户发布信息】","categories":[{"name":"前端","slug":"前端","permalink":"https://shankun.top/categories/前端/"}],"tags":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://shankun.top/tags/微信小程序/"}]},{"title":"jenkins搭建部署node项目","slug":"jenkins部署node项目","date":"2019-03-26T09:19:00.000Z","updated":"2024-03-25T06:02:15.157Z","comments":true,"path":"2019/03/26/jenkins部署node项目/","link":"","permalink":"https://shankun.top/2019/03/26/jenkins部署node项目/","excerpt":"目标 centos搭建jenkins 实现github提交代码后自动部署项目","text":"目标 centos搭建jenkins 实现github提交代码后自动部署项目 git安装 下载git命令:wget https://www.kernel.org/pub/software/scm/git/git-2.8.3.tar.gz //选择一个目录后执行，我的是/usr/local/git 解压git的tar包命令: tar -xzvf git-2.8.3.tar.gz ，进入解压后的文件夹:cd git-2.8.3 安装git安装编译所需要的依赖命令:yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker 安装编译源码所需依赖的时候，yum自动帮你安装了git，这时候你需要先卸载这个旧版的git，命令：yum remove git 编译git源码命令:make prefix=/usr/local/git all 安装git至/usr/local/git路径命令：make prefix=/usr/local/git install 配置git环境变量:vim /etc/profile #编辑profile文件—-&gt;最下边添加git的路径即可：export PATH=$PATH:/usr/local/git/bin 让profile文件修改生效命令:source /etc/profile 检验git是否安装成功命令:git –version 安装成功图如下: tomcat安装 官网 上传服务器 使用FTPCute、WinSCP等工具，可以把安装包上传到服务器 路径是/opt。 安装tomcat用Xshell等Linux远程连接工具访问服务器【这里更推荐使用MobaXtrem，拖拽式上传文件】。进入/opt目录，指令是cd /opt。解压安装包，指令是tar -xzvf apache-tomcat-7.0.67.tar.gz。重命名解压后的文件夹，指令是mv apache-tomcat-7.0.67 tomcat。进入内部文件夹，指令是cd /opt/tomcat/bin。尝试启动tomcat，【启动命令】sh startup.sh，如果报错Cannot find ./catalina.sh.The file is absent or does not have execute permission.This file is needed to run this program，则表示权限不足。开启权限，指令是chmod 777 *.sh，然后再次启动tomcat，如果这时候没有报错，那就表示正在启动了。输入tailf /opt/tomcat/logs/catalina.out，可以查看到tomcat的运行信息，如果看到INFO: Server startup in 1925 ms，则表示tomcat已经启动成功了，按ctrl+c退出该日志。【停止命令】sh shutdown.sh 停止tomcat的运行，继续进行后续操作。 修改tomcat默认端口【亦可不修改】tomcat默认的端口是8080，也就是说我们在浏览器访问的时候，需要在域名或IP后面加上:8080， 这样不太方便，但是这个可以修改。打开tomcat配置文件，指令是vi /opt/tomcat/conf/server.xml。打开之后按i或者a进入编辑模式。找到8080，改为80。然后按Esc键，然后按:wq，保存并退出（那个:是需要同时按着shift键才能出来的）。启动tomcat【进入bin目录 sh startup.sh】。开放防火墙80端口。开放：firewall-cmd –zone=public –add-port=80/tcp –permanent重载：firewall-cmd –reload tomcat配置编码有问题，在Tomcat–&gt;conf–&gt;server.xml文件中修改即可： 访问在浏览器输入该服务器的域名或者IP，可以看到默认页面。【我这里是使用的默认端口8080】 jenkins部署jenkins的war包下载地址：https://jenkins.io/doc/book/installing/ 找到WAR file 解压安装将jenkins.war包放到Tomcat中webapps并解压，启动Tomcat，成功启动之后访问ip和端口和jenkins如下： 查看密码命令:vim +图片上显示的红色地址，进入下一个界面让我们安装插件，可以选择左边的，是推荐插件，右边是自己选择(这个没什么必要)安装过程有点慢，只需要等待即可。安装完后自己看提示输入管理员信息。重启tomcat，在网页上输入jenkins地址，登录后的界面如下: 插件安装 插件安装【工作台-系统管理-插件管理】 在可选插件中安装Deploy to container Plugin(这个是支持将代码部署到tomcat容器的)，选择后直接安装就可以，在安装界面下方勾选安装后重启，如下图： 同样的方式安装：GitHub plugin 和 NodeJS Plugin 全局配置 全局工具配置【工作台-系统管理-全局工具配置】 git配置 这里注意下git位置，这是可执行文件的地址，不是我们前面安装git的地址，是git/bin下的可执行文件 git的目录，如果不知道可以执行命令:#whereis git,找到路径带bin的git地址就是上面要填的。 node配置 系统设置【工作台-系统管理-系统设置】 在系统管理里面的系统设置中新增一个环境变量，防止新建任务中的git地址填写报208或108错误，【键：GIT_SSL_NO_VERIFY】如下图: 添加凭据【工作台-凭据】 ，即全局git key的配置 第一步：服务器cmd ssh -keygen 生成公钥与私钥点击 工作台-凭据-系统-全局凭据【私钥添加】 github公钥添加【github-setting里添加，怎么添加去百度吧，一大堆】 新建任务【任务配置】选择一个自由放个的软件项目-确定 源码管理 立即构建【进入项目xxx】可以通过控制台查看构建日志 自动构建jenkins 配置github 实现提交代码自动触发jenkins job【webhook触发】 方法","categories":[{"name":"服务器","slug":"服务器","permalink":"https://shankun.top/categories/服务器/"}],"tags":[{"name":"jenkins","slug":"jenkins","permalink":"https://shankun.top/tags/jenkins/"},{"name":"部署","slug":"部署","permalink":"https://shankun.top/tags/部署/"},{"name":"运维","slug":"运维","permalink":"https://shankun.top/tags/运维/"},{"name":"自动化","slug":"自动化","permalink":"https://shankun.top/tags/自动化/"}]},{"title":"终端神器Mobaxterm【拖拽式上传】","slug":"终端神器Mobaxterm【拖拽式上传】","date":"2019-03-07T07:45:00.000Z","updated":"2024-03-25T06:02:15.164Z","comments":true,"path":"2019/03/07/终端神器Mobaxterm【拖拽式上传】/","link":"","permalink":"https://shankun.top/2019/03/07/终端神器Mobaxterm【拖拽式上传】/","excerpt":"给大佬递上链接┏ (゜ω゜)=☞：百度云，提取码：ans9","text":"给大佬递上链接┏ (゜ω゜)=☞：百度云，提取码：ans9 准备连接步骤【看图说话】1.点击session 2.选择SSH，点击OK 3.输入密码 【同样的方法添加一下sftp】连接成功以后 说明左侧目录为服务器根目录可拖拽式上传文件，右侧可命令行输入操作","categories":[{"name":"服务器","slug":"服务器","permalink":"https://shankun.top/categories/服务器/"}],"tags":[{"name":"ssh","slug":"ssh","permalink":"https://shankun.top/tags/ssh/"},{"name":"ftp","slug":"ftp","permalink":"https://shankun.top/tags/ftp/"},{"name":"sftp","slug":"sftp","permalink":"https://shankun.top/tags/sftp/"},{"name":"linux","slug":"linux","permalink":"https://shankun.top/tags/linux/"}]},{"title":"分支管理","slug":"分支管理","date":"2019-02-26T14:43:00.000Z","updated":"2024-03-25T06:02:15.160Z","comments":true,"path":"2019/02/26/分支管理/","link":"","permalink":"https://shankun.top/2019/02/26/分支管理/","excerpt":"何为分支【差不多原理】从当前主分支【比如master】复制一个版本【比如dev】进行修改或新开发，并且不会影响主分支的版本，主分支可继续向前迭代，新分支也可以继续进行分支，并且所有版本可以相互合并【merge】","text":"何为分支【差不多原理】从当前主分支【比如master】复制一个版本【比如dev】进行修改或新开发，并且不会影响主分支的版本，主分支可继续向前迭代，新分支也可以继续进行分支，并且所有版本可以相互合并【merge】 基本操作创建dev分支，然后切换到dev分支：12git checkout -b devSwitched to a new branch &apos;dev&apos; git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：123$ git branch dev$ git checkout devSwitched to branch &apos;dev&apos; 查看分支123456git branch // 查看本地分支* dev // 当前分支前面会标一个*号。 mastergit branch -a // 查看本地及远程分支 总结查看分支：git branch 创建分支：git branch &lt;name&gt; 切换分支：git checkout &lt;name&gt; 创建+切换分支：git checkout -b &lt;name&gt; 合并某分支到当前分支：git merge &lt;name&gt; 删除分支：git branch -d &lt;name&gt;","categories":[{"name":"工具","slug":"工具","permalink":"https://shankun.top/categories/工具/"}],"tags":[{"name":"git","slug":"git","permalink":"https://shankun.top/tags/git/"}]},{"title":"git配置多账号登录不同项目","slug":"git配置多账号登录不同项目","date":"2019-02-12T01:31:00.000Z","updated":"2024-03-25T06:02:15.156Z","comments":true,"path":"2019/02/12/git配置多账号登录不同项目/","link":"","permalink":"https://shankun.top/2019/02/12/git配置多账号登录不同项目/","excerpt":"需求我们做项目时会有自己的github账号，和公司的git账号。","text":"需求我们做项目时会有自己的github账号，和公司的git账号。本文以配置github.com账号、码云账号以及公司git账号，即在Windows环境下配置Git多账号的使用 生成github.com对应的私钥公钥1.首先进入.ssh文件夹:右键Git Bash Here 2.执行命令 ssh-keygen -t rsa -C email 创建github对应的sshkey，命名为id_rsa_github，密码可以为空，一路回车【如下图】 私钥公钥 PS：同样的方式配置码云以及公司git的私钥公钥 把github、码云和公司的git对应的公钥上传到服务器 上传公钥 SSH配置邮箱不同也会对应不同的SSH key，所以要针对不同的项目使用不同的key。所以打开git全局配置文件。一般在用户目录下的.ssh文件夹中。比如windows用户就是：C:\\Users\\用户名.sshLinux就是～/.ssh找到config文件。没有就新建一个config.txt【保存时去掉.txt,即改为config】，用文本编辑器打开，添加如下配置：1234567891011121314151617181920# 配置github.comHost github.com HostName github.com IdentityFile ~/.ssh/id_rsa_github PreferredAuthentications publickey User xushankun# 配置git.xxx.comHost git.xxx.com HostName git.xxx.com IdentityFile ~/.ssh/id_rsa PreferredAuthentications publickey User xxxusername# 配置gitee.comHost gitee.com HostName gitee.com IdentityFile ~/.ssh/id_rsa_gitee PreferredAuthentications publickey User xusk HostName 是真实的域名地址 IdentityFile 是id_rsa的地址 PreferredAuthentications 配置登录时用什么权限认证–可设为publickey,passwordpublickey,keyboard-interactive等 User 配置使用用户名 配置完以后ssh文件夹 ssh文件夹 测试是否成功测试成功如下12345678lovex@DESKTOP-CCCU4BL MINGW64 ~/Desktop$ ssh -T git@github.comEnter passphrase for key &apos;/c/Users/lovex/.ssh/id_rsa_github&apos;:Hi xushankun! You&apos;ve successfully authenticated, but GitHub does not provide shell access.lovex@DESKTOP-CCCU4BL MINGW64 ~/Desktop$ ssh -T git@gitee.comHi xusk! You&apos;ve successfully authenticated, but GITEE.COM does not provide shell access.","categories":[{"name":"工具","slug":"工具","permalink":"https://shankun.top/categories/工具/"}],"tags":[{"name":"git","slug":"git","permalink":"https://shankun.top/tags/git/"}]},{"title":"关于@touchmove.prevent","slug":"关于-touchmove-prevent","date":"2019-01-25T05:44:00.000Z","updated":"2024-03-25T06:02:15.159Z","comments":true,"path":"2019/01/25/关于-touchmove-prevent/","link":"","permalink":"https://shankun.top/2019/01/25/关于-touchmove-prevent/","excerpt":"1.需求在出现弹窗时，禁止滑动弹窗后面的主体页面","text":"1.需求在出现弹窗时，禁止滑动弹窗后面的主体页面 2.原理移动端的屏幕滑动，实际上就是touchmove事件的默认行为在冒泡过程中任何一层阻止这个默认行为，都可以阻止屏幕滑动 3.带来新的问题导致问题：如果在点击屏幕的时候手指滑动的话，是不会触发click事件的。或者被点击的元素是移动状态，则概率性出发click 事件。 分析原因：在移动端上点击屏幕时，会依次触发touchstart,touchmove,touchend,click事件。 触发过程：touchstart→touchmove→touchend或者touchstart→touchend→click。 4.解决办法touchend 替代 click【暂时未找到更好的办法】 avatar","categories":[{"name":"H5","slug":"H5","permalink":"https://shankun.top/categories/H5/"}],"tags":[{"name":"touch","slug":"touch","permalink":"https://shankun.top/tags/touch/"}]},{"title":"github中fork的使用","slug":"github中fork的使用","date":"2018-12-13T02:01:00.000Z","updated":"2024-03-25T06:02:15.155Z","comments":true,"path":"2018/12/13/github中fork的使用/","link":"","permalink":"https://shankun.top/2018/12/13/github中fork的使用/","excerpt":"在Github上如果看到有很不错的项目和作品，一般我们可以进行三种操作：那就是watch，star和fork","text":"在Github上如果看到有很不错的项目和作品，一般我们可以进行三种操作：那就是watch，star和fork watch就是关注repo的动态 star则类似社交网站的点赞，收藏，like等 fork就是讲别人的项目拷贝一份给自己，new一个新的分支（Branch）出来，你push的改进和补充则又由原作者选择是否接受。【更改别人项目的bug 或者 优化别人的项目的常用操作】 如下图所示： github-fork1 第一步：fork后 直接是以下界面【github的操作】 github-fork2 第二步：直接 clone 代码到本地进行修改并提交【git操作】这里正常修改代码提交【就不多废话了】详见： git基本使用命令 第三步：pull requestNew pull request github-fork3 点击Create pull request 【新建关于提交代码的 issues 进行讨论】 github-fork4 添加描述并确认创建 github-fork5 第四步：结果等待确认是否通过如果出现merge pull request按钮，表示可以和上游仓库同步。之后点下方的merge pull request进行合并，并确认。 github-fork6 github-fork7 删除自己的一个 repository【仓库】这里包含自己建的仓库与fork【复制别人的项目到自己】的仓库 找到项目settings选项 github-fork8 右下角 delete this repository github-fork9 输入仓库名称，点击同意 github-fork10 输入github密码 进行最后确认删除","categories":[{"name":"工具","slug":"工具","permalink":"https://shankun.top/categories/工具/"}],"tags":[{"name":"git","slug":"git","permalink":"https://shankun.top/tags/git/"},{"name":"Github","slug":"Github","permalink":"https://shankun.top/tags/Github/"}]},{"title":"微信小程序组件【文本部分和全部显示】","slug":"微信小程序组件【文本部分和全部显示】","date":"2018-11-06T08:31:00.000Z","updated":"2024-03-25T06:02:15.162Z","comments":true,"path":"2018/11/06/微信小程序组件【文本部分和全部显示】/","link":"","permalink":"https://shankun.top/2018/11/06/微信小程序组件【文本部分和全部显示】/","excerpt":"文本部分和全部显示 代码：displayPartText","text":"文本部分和全部显示 代码：displayPartText 需求1.文本很多时【收起来，保留指定3行】 partText1 2.展开后【变为收起来的按钮】 partText2 3.又或者我们还有这样的情况，当文字小于等于3行的时候【不显示按钮】 partText3 组件属性 textLineHeight【文本行高：number类型默认值52，单位rpx】 lineNumber【显示行数：number类型默认值2,】 showBtnText【显示按钮文本，string类型默认值‘更多内容’】 hideBtnText【隐藏按钮文本，string类型默认值‘收起来’】 btnShowPosition【按钮显示位置，string类型默认值‘bottom’，可选值rightBottom显示为右下角显示如下图】 partText4 组件方法actionHandle隐藏显示时的回调 返回值为true时是show的回调，false时是hide的回调 组件使用第一步index.json里引用12345&#123; \"usingComponents\": &#123; \"displayPartText\": \"../components/display-part-text/display-part-text\" &#125;&#125; 第二步index.html1&lt;displayPartText lineNumber=\"3\" textLineHeight=\"52\" bind:actionHandle=\"actionHandle\"&gt;雨静悄悄地下着，只有一点细细的淅沥沥的声音。桔红色的房屋，像披着鲜艳的袈裟的老僧，垂头合目，受着雨底洗礼。那潮湿的红砖，发出有刺激性的猪血的颜色和墙下绿油油的桂叶成为强烈的对照。灰色的癞蛤蟆，在湿烂发霉的泥地里跳跃着；在秋雨的沉闷的网底，只有它是唯一的充满愉快的生气的东西。它背上灰黄斑驳的花纹，跟沉闷的天空遥遥相应，造成和谐的色调。它噗通噗通地跳着，从草窠里，跳到泥里，溅出深绿的水花。&lt;/displayPartText&gt; 第三步index.js1234567actionHandle(e)&#123; if (e.detail)&#123; console.log('show') // 显示回调 &#125; else &#123; console.log('hide') // 收起回调 &#125; &#125;,","categories":[{"name":"前端","slug":"前端","permalink":"https://shankun.top/categories/前端/"}],"tags":[{"name":"微信小程序","slug":"微信小程序","permalink":"https://shankun.top/tags/微信小程序/"}]},{"title":"nginx 反向代理--解决前端跨域问题","slug":"nginx-反向代理-解决前端跨域问题","date":"2018-10-18T07:28:00.000Z","updated":"2024-03-25T06:02:15.158Z","comments":true,"path":"2018/10/18/nginx-反向代理-解决前端跨域问题/","link":"","permalink":"https://shankun.top/2018/10/18/nginx-反向代理-解决前端跨域问题/","excerpt":"跨域浏览器同源策略造成的，所有支持javascript的浏览器都支持这个策略，【这里不多说了】 NginxNginx (engine x) 是一个高性能的HTTP和反向代理服务【百度百科】 需求当我们调试前端页面的时候，浏览器报出跨域【即接口与本地服务器不在同一个域内】","text":"跨域浏览器同源策略造成的，所有支持javascript的浏览器都支持这个策略，【这里不多说了】 NginxNginx (engine x) 是一个高性能的HTTP和反向代理服务【百度百科】 需求当我们调试前端页面的时候，浏览器报出跨域【即接口与本地服务器不在同一个域内】 解决步骤一、下载nginx包，官网 release-npm-1 二、解压到任意文件夹并打开配置文件 release-npm-1 三、编辑配置文件 release-npm-1 release-npm-1 最后 ctrl+s保存 四、运行访问双击运行nginx.exe【后台任务管理器进程运行，无界面】浏览器访问localhost即可访问项目根目录完整接口访问如下： release-npm-1","categories":[{"name":"服务器","slug":"服务器","permalink":"https://shankun.top/categories/服务器/"}],"tags":[{"name":"Nginx","slug":"Nginx","permalink":"https://shankun.top/tags/Nginx/"}]},{"title":"博客论坛","slug":"博客论坛","date":"2018-10-09T09:11:00.000Z","updated":"2024-03-25T06:02:15.160Z","comments":true,"path":"2018/10/09/博客论坛/","link":"","permalink":"https://shankun.top/2018/10/09/博客论坛/","excerpt":"个人常去的博客论坛【没有排名，O(∩_∩)O哈哈~】 掘金 CSDN web前端-伯乐在线【社区】 InterviewMap【面试图谱】 张鑫旭【专治各种css兼容】 阮一峰大神 廖雪峰大神【js,python,git】 JavaScript开发者应懂的33个概念 【js深入】","text":"个人常去的博客论坛【没有排名，O(∩_∩)O哈哈~】 掘金 CSDN web前端-伯乐在线【社区】 InterviewMap【面试图谱】 张鑫旭【专治各种css兼容】 阮一峰大神 廖雪峰大神【js,python,git】 JavaScript开发者应懂的33个概念 【js深入】 关于less【css预处理】 学习Less-看这篇就够了【Less】","categories":[{"name":"blog","slug":"blog","permalink":"https://shankun.top/categories/blog/"}],"tags":[{"name":"blog","slug":"blog","permalink":"https://shankun.top/tags/blog/"}]},{"title":"npm包的发布","slug":"npm包的发布","date":"2018-09-12T05:20:00.000Z","updated":"2024-03-25T06:02:15.158Z","comments":true,"path":"2018/09/12/npm包的发布/","link":"","permalink":"https://shankun.top/2018/09/12/npm包的发布/","excerpt":"首先去官网注册npm帐号去npm官网注册帐号 然后在本地新建项目文件夹，例如shankuncd shankun npm init //初始化一个package.json","text":"首先去官网注册npm帐号去npm官网注册帐号 然后在本地新建项目文件夹，例如shankuncd shankun npm init //初始化一个package.json 默认包名称 【一定得是npm库里不存在的，可以去npm官网查询】 描述 版本号 入口文件(index.js) 默认 关键词 作者 回车 初始化OK 【文件夹shankun下多了一个文件package.json】 当前目录下新建index.js【初始化时指定的入口文件】 release-npm-1 README.md 项目描述文件【非必选，不过作为一个专业的开发，你懂的】 release-npm-2 准备发布cd shankun npm login 12npm publish // 发布成功如下图【每次发布版本号不能重复】// + 包名@版本号 移除包1234567npm unpublish // 同发布// - 包名@版本号``` ### 接下来 我们 就可以【npm install 包名称】去安装包了**官网查询结果如下图：**![release-npm-5](https://shankun-1257055090.cos.ap-chengdu.myqcloud.com/blog/npmImg/release-npm-5.png) -g 全局–save 本地安装写进package.json 的 dependencies–save-dev 本地安装写进package.json 的 devDependencies`","categories":[{"name":"工具","slug":"工具","permalink":"https://shankun.top/categories/工具/"}],"tags":[{"name":"node","slug":"node","permalink":"https://shankun.top/tags/node/"},{"name":"npm","slug":"npm","permalink":"https://shankun.top/tags/npm/"}]},{"title":"JS生成随机字符串【字母数字】","slug":"JS生成随机字符串【字母数字】","date":"2018-09-07T03:31:00.000Z","updated":"2024-03-25T06:02:15.151Z","comments":true,"path":"2018/09/07/JS生成随机字符串【字母数字】/","link":"","permalink":"https://shankun.top/2018/09/07/JS生成随机字符串【字母数字】/","excerpt":"说明JS生成随机字符串，可指定长度或范围，内容数组自定义","text":"说明JS生成随机字符串，可指定长度或范围，内容数组自定义 代码1234567891011121314function randomWord(randomFlag, min, max)&#123; var str = \"\", range = min, arr = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']; // 随机产生 if(randomFlag)&#123; range = Math.round(Math.random() * (max-min)) + min; &#125; for(var i=0; i&lt;range; i++)&#123; pos = Math.round(Math.random() * (arr.length-1)); str += arr[pos]; &#125; return str;&#125; 使用方法1.生成3-32位随机串：randomWord(true, 3, 32)12randomWord(true,3,32)// &quot;vlOlaIiS9wEwa&quot; 2.生成43位随机串：randomWord(false, 43)12randomWord(false,43)// &quot;DBYFsRVmmQ4TNy1tmb82NkqhAxPowYy13u74Hf5a9Oe&quot;","categories":[{"name":"前端","slug":"前端","permalink":"https://shankun.top/categories/前端/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://shankun.top/tags/javascript/"}]},{"title":"centos 7 安装 node","slug":"centos-7-安装-node","date":"2018-09-03T06:42:00.000Z","updated":"2024-03-25T06:02:15.153Z","comments":true,"path":"2018/09/03/centos-7-安装-node/","link":"","permalink":"https://shankun.top/2018/09/03/centos-7-安装-node/","excerpt":"友情链接【偷懒一波，哈哈】centos7.x安装node","text":"友情链接【偷懒一波，哈哈】centos7.x安装node 安装步骤 1.选择安装目录1cd /usr/local/src 2.官网选择最新版本Linux Binaries 64-bit 【二进制的版本】，右键复制链接地址命令行执行下载1wget https://nodejs.org/dist/v8.11.4/node-v8.11.4-linux-x64.tar.xz 3.解压安装包12xz -d node-v8.11.4-linux-x64.tar.xz // 先转成xztar -xvf node-v8.11.4-linux-x64.tar // 再完成解压 4.重命名为node1mv node-v8.11.4-linux-x64 node 5.配置环境变量1vim /etc/profile 6.在文件最后面添加123#set for nodejsexport NODE_HOME=/usr/local/src/nodeexport PATH=$NODE_HOME/bin:$PATH 7.保存退出（:wq）执行命令是更改生效1source /etc/profile 8.查看版本12node -v // v8.11.4npm -v // 5.6.0 最后安利一个终端神器MobaXterm同时左侧sftp，右侧命令行操作可在线拖拽式上传文件，还可用本地编辑器打开文件，真的神器","categories":[{"name":"服务器","slug":"服务器","permalink":"https://shankun.top/categories/服务器/"}],"tags":[{"name":"node","slug":"node","permalink":"https://shankun.top/tags/node/"}]},{"title":"JS防抖与节流函数","slug":"JS防抖","date":"2018-08-31T06:56:00.000Z","updated":"2024-03-25T06:02:15.151Z","comments":true,"path":"2018/08/31/JS防抖/","link":"","permalink":"https://shankun.top/2018/08/31/JS防抖/","excerpt":"防抖多次事件触发后，事件处理函数只执行一次，并且是在触发操作结束时执行","text":"防抖多次事件触发后，事件处理函数只执行一次，并且是在触发操作结束时执行 原理对处理函数进行延时操作，若设定的延时到来之前，再次触发事件，则清楚上一次的延时操作定时器，重新定时。 搜索当输入完最后一个字才调用查询接口，这个时候适用延迟执行的防抖函数，它总是在一连串（间隔小于wait的）函数触发之后调用。 点赞功能当用户按下点赞的时候立即执行点赞回调，它总是在第一次调用，并且下一次调用必须与前一次调用的时间间隔大于wait才会触发。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546/** * 防抖函数，返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行 * * @param &#123;function&#125; func 回调函数【当使用es6的时候注意this指针，最好直接使用function传入】 * @param &#123;number&#125; wait 表示时间窗口的间隔 * @param &#123;boolean&#125; immediate 设置为ture时，是否立即调用函数 * @return &#123;function&#125; 返回客户调用函数 */// immediate = true; 适合点赞或收藏时的立即执行// immediate = false; 适合搜索时,输入结束时调用搜索let debounce = (func, wait = 50, immediate = true) =&gt;&#123; let timer, context, args // 延迟执行函数 const later = () =&gt; setTimeout(() =&gt; &#123; // 延迟函数执行完毕，清空缓存的定时器序号 timer = null // 延迟执行的情况下，函数会在延迟函数中执行 // 使用到之前缓存的参数和上下文 if (!immediate) &#123; func.apply(context, args) context = args = null &#125; &#125;, wait) // 这里返回的函数是每次实际调用的函数 return function (...params) &#123; // 如果没有创建延迟执行函数（later），就创建一个 if (!timer) &#123; timer = later() // 如果是立即执行，调用函数 // 否则缓存参数和调用上下文 if (immediate) &#123; func.apply(this, params) &#125; else &#123; context = this args = params &#125; // 如果已有延迟执行函数（later），调用的时候清除原来的并重新设定一个 // 这样做延迟函数会重新计时 &#125; else &#123; clearTimeout(timer) timer = later() &#125; &#125;&#125; 节流防抖动和节流本质是不一样的。防抖动是将多次执行变为最后一次执行，节流是将多次执行变成每隔一段时间执行。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768// 这个是用来获取当前时间戳的function _now() &#123; return +new Date()&#125;/** * * @param &#123;function&#125; func 回调函数 * @param &#123;number&#125; wait 表示时间窗口的间隔 * @param &#123;object&#125; options 如果想忽略开始函数的的调用，传入&#123;leading: false&#125;。 * 如果想忽略结尾函数的调用，传入&#123;trailing: false&#125; * 两者不能共存，否则函数不能执行 * @return &#123;function&#125; 返回客户调用函数 */let throttle = (func, wait, options)=&gt; &#123; var context, args, result; var timeout = null; // 之前的时间戳 var previous = 0; // 如果 options 没传则设为空对象 if (!options) options = &#123;&#125;; // 定时器回调函数 var later = function() &#123; // 如果设置了 leading，就将 previous 设为 0 // 用于下面函数的第一个 if 判断 previous = options.leading === false ? 0 : _now(); // 置空一是为了防止内存泄漏，二是为了下面的定时器判断 timeout = null; result = func.apply(context, args); if (!timeout) context = args = null; &#125;; return function() &#123; // 获得当前时间戳 var now = _now(); // 首次进入前者肯定为 true // 如果需要第一次不执行函数 // 就将上次时间戳设为当前的 // 这样在接下来计算 remaining 的值时会大于0 if (!previous &amp;&amp; options.leading === false) previous = now; // 计算剩余时间 var remaining = wait - (now - previous); context = this; args = arguments; // 如果当前调用已经大于上次调用时间 + wait // 或者用户手动调了时间 // 如果设置了 trailing，只会进入这个条件 // 如果没有设置 leading，那么第一次会进入这个条件 // 还有一点，你可能会觉得开启了定时器那么应该不会进入这个 if 条件了 // 其实还是会进入的，因为定时器的延时 // 并不是准确的时间，很可能你设置了2秒 // 但是他需要2.2秒才触发，这时候就会进入这个条件 if (remaining &lt;= 0 || remaining &gt; wait) &#123; // 如果存在定时器就清理掉否则会调用二次回调 if (timeout) &#123; clearTimeout(timeout); timeout = null; &#125; previous = now; result = func.apply(context, args); if (!timeout) context = args = null; &#125; else if (!timeout &amp;&amp; options.trailing !== false) &#123; // 判断是否设置了定时器和 trailing // 没有的话就开启一个定时器 // 并且不能不能同时设置 leading 和 trailing timeout = setTimeout(later, remaining); &#125; return result; &#125;; &#125;; 简版防抖节流12345678910111213141516171819202122232425262728293031323334//函数节流const throttle = (fun, delay) =&gt; &#123; let last = null return () =&gt; &#123; const now = + new Date() if (now - last &gt; delay) &#123; fun() last = now &#125; &#125;&#125;//实例const throttleExample = throttle(() =&gt; console.log(1), 1000)//调用throttleExample()throttleExample()throttleExample()//函数防抖cosnt debouce = (fun, delay) =&gt; &#123; let timer = null return () =&gt; &#123; clearTimeout(timer) timer = setTimeout(() =&gt; &#123; fun() &#125;, delay) &#125;&#125;//实例const debouceExample = debouce(() =&gt; console.log(1), 1000)//调用debouceExample()debouceExample()debouceExample()","categories":[{"name":"前端","slug":"前端","permalink":"https://shankun.top/categories/前端/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://shankun.top/tags/javascript/"}]},{"title":"git ssh 添加","slug":"gitssh添加","date":"2018-07-12T12:03:00.000Z","updated":"2024-03-25T06:02:15.155Z","comments":true,"path":"2018/07/12/gitssh添加/","link":"","permalink":"https://shankun.top/2018/07/12/gitssh添加/","excerpt":"1.打开git bash 2.配置git的name和email 12$ git config global user.name \"xushankun\"$ git config global user.email \"lovexsk@qq.com\"","text":"1.打开git bash 2.配置git的name和email 12$ git config global user.name \"xushankun\"$ git config global user.email \"lovexsk@qq.com\" 3.生成密钥1$ ssh-keygen -t rsa -C \"lovexsk@qq.com\" 然后回车，然后会提示输入2次密码，密钥生成。 4.将密钥添加到ssh-agent12eval \"$(ssh-agent -s)\"ssh-add ~/.ssh/id_rsa 5.登陆github，添加SSH将id_rsa.pub文件的内容添加到github 找到系统用户【当前系统用户】，.ssh 里的 id_rsa.pub文件内容 复制 到github 6.测试1ssh -T git@github.com 提示Hi,xxx","categories":[{"name":"工具","slug":"工具","permalink":"https://shankun.top/categories/工具/"}],"tags":[{"name":"git","slug":"git","permalink":"https://shankun.top/tags/git/"}]},{"title":"献给我的同代人  --舒婷","slug":"献给我的同代人-舒婷","date":"2018-05-17T09:29:00.000Z","updated":"2024-03-25T06:02:15.164Z","comments":true,"path":"2018/05/17/献给我的同代人-舒婷/","link":"","permalink":"https://shankun.top/2018/05/17/献给我的同代人-舒婷/","excerpt":"他们在天上愿为一颗星","text":"他们在天上愿为一颗星他们在地上愿为一盏灯不怕显得多么渺小只要尽其可能 唯因不被承认才格外勇敢真诚即使像眼泪一样跌碎敏感的大地处处仍有持久而悠远的回声 为开拓心灵的处女地走入禁区，也许——就在那里牺牲留下歪歪斜斜的脚印给后来者签署通行证 1980.4","categories":[{"name":"诗词文章","slug":"诗词文章","permalink":"https://shankun.top/categories/诗词文章/"}],"tags":[{"name":"诗词","slug":"诗词","permalink":"https://shankun.top/tags/诗词/"}]},{"title":"bMAP简单使用【百度地图API】","slug":"bMAP简单使用【百度地图API】","date":"2018-05-04T08:28:00.000Z","updated":"2024-03-25T06:02:15.153Z","comments":true,"path":"2018/05/04/bMAP简单使用【百度地图API】/","link":"","permalink":"https://shankun.top/2018/05/04/bMAP简单使用【百度地图API】/","excerpt":"第一步申请百度地图api key 【需要实名认证】 1&lt;script type=\"text/javascript\" src=\"http://api.map.baidu.com/api?v=3.0&amp;ak=您的密钥\"&gt;&lt;/script&gt;","text":"第一步申请百度地图api key 【需要实名认证】 1&lt;script type=\"text/javascript\" src=\"http://api.map.baidu.com/api?v=3.0&amp;ak=您的密钥\"&gt;&lt;/script&gt; 第二步下面的变量 site 获取到当前坐标的 省 市 区 街道 街道号 12345678&lt;script type=\"text/javascript\"&gt; var geoc = new BMap.Geocoder(); geoc.getLocation(new BMap.Point(120.3066572944592,31.56715494761835), function(rs)&#123; var addComp = rs.addressComponents; var site = addComp.province + addComp.city + addComp.district + addComp.street + addComp.streetNumber; console.log(site); &#125;);&lt;/script&gt;","categories":[{"name":"前端","slug":"前端","permalink":"https://shankun.top/categories/前端/"}],"tags":[{"name":"百度API","slug":"百度API","permalink":"https://shankun.top/tags/百度API/"}]},{"title":"git基本使用命令","slug":"git基本使用命令","date":"2018-03-09T02:02:00.000Z","updated":"2024-03-25T06:02:15.156Z","comments":true,"path":"2018/03/09/git基本使用命令/","link":"","permalink":"https://shankun.top/2018/03/09/git基本使用命令/","excerpt":"git四个阶段的撤销更改基本概念三个步骤 工作区→暂存区→本地仓库→远程仓库123git add .git commit -m &quot;content&quot;git push","text":"git四个阶段的撤销更改基本概念三个步骤 工作区→暂存区→本地仓库→远程仓库123git add .git commit -m &quot;content&quot;git push git add. 把所有文件放入暂存区 git commit把所有文件从暂存区提交进本地仓库； git push把所有文件从本地仓库推送进远程仓库。 四个区git相比于svn等传统的版本管理工具，多了一个暂存区（state）的概念 工作区（Working Area） 暂存区（State） 本地仓库（Local Repository） 远程仓库 （Remote Repository） 五种状态进入每一个区都会有一种状态，加上初始状态，刚好5个状态，分别如下： 未修改（Origin） 已修改（Modified） 已暂存（Stated） 已提交（Commited） 已推送（Pushed） 检查修改已修改，未暂存当我们修改了某个文件，但是还没有git add .之前，我们用git diff命令来检查哪些文件内容被修改了【还未进入暂存区】 已暂存，未提交现在我们把 修改 放入暂存区看看。先执行 git add .，再执行 git diff，会发现没有任何结果。【说明：git diff只检查工作区和暂存区之间的差。如果我们想看到暂存区和本地仓库间的差异，使用git diff cached】 已提交，未推送现在我们把修改从暂存区提交到本地仓库，先执行git commit,再执行git diff --cached，没有差异。执行git diff master origin/master，我们可以看到差异。master是你的本地仓库，而origin/master是你的远程仓库,master是分支的意思，因为我们都在主分支上工作，而origin就代表远程。 撤销修改如果我们只在编辑器里修改了文件，但还没有执行git add .,这时我们的文件还在工作区，并没有进入暂存区。我们可以用：1git checkout 或 git reset --hard 来进行撤销操作， 修改后git add .前进一步，git checkout后退一步撤销刚才的修改。 已暂存，本地已提交你已经执行了git add .,但还没执行git commit -m &#39;comment&#39;，这时候意识到错误，想要撤销可以执行12git resetgit checkout 或1git reset --hard 已提交，未推送执行了git add .，又执行了git commit ,这时候你的代码进入了本地仓库，1git reset --hard origin/master 已推送的12git reset --hard HEAD^ //先恢复本地仓库git push -f //强制push到远程仓库 fatal: Authentication failed for又不弹出用户名和密码重置切换执行命令1git config --system --unset credential.helper 然后就可以重新提交用户名和密码进行提交了 添加本地项目到git【本地已配置用户名及密码】命令行中执行以下：12git init ----------初始化git仓库git remote add origin 你的项目地址 //注:项目地址形式为:http://git.oschina.net/xxx/xxx.git或者 git@git.oschina.net:xxx/xxx.git 用来连接远程码云 开始第一次上传你的项目123git add . --将项目中的所有文件上传git commit -m &apos;对上传文件的注释&apos;git push origin master --正式上传至码云中，若上传有问题，可以试试 git push origin master -f 表示舍弃线上的文件，强制推送 推送成功后git pull时【需要进行一次远程分支和本地分支的关联】 git-branch-1.png 123git branch -agit branch --set-upstream-to=remotes/origin/master master git-branch-2.png git回滚到任意版本先显示提交的log123456789101112131415161718$ git log -3commit 4dc08bb8996a6ee02fAuthor: Mark &lt;xxx@xx.com&gt;Date: Wed Sep 7 08:08:53 2016 +0800 xxxxxcommit 9cac9ba76574da2167Author: xxx&lt;xx@qq.com&gt;Date: Tue Sep 6 22:18:59 2016 +0800 improved the requstcommit e377f60e28c8b84158Author: xxx&lt;xxx@qq.com&gt;Date: Tue Sep 6 14:42:44 2016 +0800 changed the password from empty to max123 回滚到指定版本1git reset --hard e377f60e28c8b84158 强制提交1git push -f origin master","categories":[{"name":"工具","slug":"工具","permalink":"https://shankun.top/categories/工具/"}],"tags":[{"name":"git","slug":"git","permalink":"https://shankun.top/tags/git/"}]},{"title":"NPM正确使用姿势","slug":"NPM正确使用姿势","date":"2018-03-07T04:10:00.000Z","updated":"2024-03-25T06:02:15.152Z","comments":true,"path":"2018/03/07/NPM正确使用姿势/","link":"","permalink":"https://shankun.top/2018/03/07/NPM正确使用姿势/","excerpt":"npm、cnpm 安装 Node.js：https://nodejs.org/zh-cn/ 淘宝NPM：https://npm.taobao.org/ 包括更改默认的C盘为其它盘【所有npm全局包的根目录】，以及npm，cnpm环境变量的配置 安装教程：https://www.cnblogs.com/yominhi/p/7039795.html","text":"npm、cnpm 安装 Node.js：https://nodejs.org/zh-cn/ 淘宝NPM：https://npm.taobao.org/ 包括更改默认的C盘为其它盘【所有npm全局包的根目录】，以及npm，cnpm环境变量的配置 安装教程：https://www.cnblogs.com/yominhi/p/7039795.html npm安装模块1npm install xxx // 安装模块到当前node_modules【不写入package.json文件】 1npm install -g xxx // 全局安装模块 1npm install xxx --save // 写入的package.json的”dependencies”中 1npm install xxx --save-dev // 写入的package.json的”devDependencies”中 npm删除模块1npm uninstall xxx // 删除模块xxx 1npm uninstall xxx -g // 删除全局模块xxx 提示：删除模块应当安装当初安装的方式将 install 改为 uninstall 才能正确删除 other命令 npm init -y 【 -y 表示跳过设置，直接初始化默认值】 例如npm install express 就会默认安装express的最新版本，也可以通过在后面加版本号的方式安装指定版本，如npm install express@3.0.6 npm init 会引导你创建一个package.json文件，包括名称、版本、作者这些信息等 npm remove 移除 npm update 更新 npm ls 列出当前安装的了所有包 npm root 查看当前包的安装路径 npm root -g 查看全局的包的安装路径 npm help 帮助，如果要单独查看install命令的帮助，可以使用的npm help install","categories":[{"name":"工具","slug":"工具","permalink":"https://shankun.top/categories/工具/"}],"tags":[{"name":"node","slug":"node","permalink":"https://shankun.top/tags/node/"},{"name":"npm","slug":"npm","permalink":"https://shankun.top/tags/npm/"}]},{"title":"面朝大海，春暖花开            --海子","slug":"面朝大海春暖花开--海子","date":"2018-03-05T07:47:00.000Z","updated":"2024-03-25T06:02:15.165Z","comments":true,"path":"2018/03/05/面朝大海春暖花开--海子/","link":"","permalink":"https://shankun.top/2018/03/05/面朝大海春暖花开--海子/","excerpt":"从明天起，做一个幸福的人喂马、劈柴，周游世界从明天起，关心粮食和蔬菜","text":"从明天起，做一个幸福的人喂马、劈柴，周游世界从明天起，关心粮食和蔬菜我有一所房子，面朝大海，春暖花开 从明天起，和每一个亲人通信告诉他们我的幸福那幸福的闪电告诉我的我将告诉每一个人 给每一条河每一座山取一个温暖的名字陌生人，我也为你祝福愿你有一个灿烂的前程愿你有情人终成眷属愿你在尘世获得幸福我只愿面朝大海，春暖花开","categories":[{"name":"诗词文章","slug":"诗词文章","permalink":"https://shankun.top/categories/诗词文章/"}],"tags":[{"name":"诗词","slug":"诗词","permalink":"https://shankun.top/tags/诗词/"}]}]}